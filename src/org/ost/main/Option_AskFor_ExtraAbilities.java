/*
 * Option_AskFor_ExtraAbilities.java
 *
 * Created on __DATE__, __TIME__
 */

package org.ost.main;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.HeadlessException;
import java.awt.TextArea;
import java.awt.Toolkit;

import static org.ost.main.MyClasses.MyStatics.*;
import java.awt.Font;
import java.util.ArrayList;

import static org.ost.main.MyClasses.MyStatics.*;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;

import org.ost.main.MyClasses.ExtraAbilitiesClass;
import org.ost.main.MyUtils.SimpleDialog;

/**
 *
 * @author  __USER__
 */
public class Option_AskFor_ExtraAbilities extends javax.swing.JDialog {
	private MainClass ost;
	private java.awt.Frame parent;

	/** Creates new form Option_AskFor_ExtraAbilities */
	public Option_AskFor_ExtraAbilities(java.awt.Frame parent, boolean modal,
			MainClass ost, ExtraAbilitiesClass oE) {
		super(parent, modal);
		this.parent = parent;
		this.ost = ost;
		initComponents();

		currentExtraAbility = oE;

		DefaultComboBoxModel extraModel = new DefaultComboBoxModel<>(
				EXTRA_ABILITY_NAMES);
		extraTypeComboBox.setModel(extraModel);

		updateExtraAbilityPanel(currentExtraAbility);
		//		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		//		Dimension windowSize = parent.getSize();
		//		int windowX = Math.max(0, (screenSize.width - windowSize.width) / 2);
		//		int windowY = Math.max(0, (screenSize.height - windowSize.height) / 2);
		//		setLocation(windowX, windowY);
		setLocationRelativeTo(parent);
		//setSize(480, 360);

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		conBonusButtonGroup = new javax.swing.ButtonGroup();
		jScrollPane2 = new javax.swing.JScrollPane();
		mainPanel = new javax.swing.JPanel();
		extraNameLabel = new javax.swing.JLabel();
		extraNameTextField = new javax.swing.JTextField();
		extraDescriptionButton = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		extraTypeComboBox = new javax.swing.JComboBox();
		savesPanel = new javax.swing.JPanel();
		savesButton = new javax.swing.JButton();
		saveAdjustmentsButton = new javax.swing.JButton();
		abilityScoresPanel = new javax.swing.JPanel();
		abilityScoreAdjustmentsButton = new javax.swing.JButton();
		extraThiefBasePanel = new javax.swing.JPanel();
		extraThiefSkillsBaseButton = new javax.swing.JButton();
		extraThiefSkillsAdjustmentButton = new javax.swing.JButton();
		extraClericBasePanel = new javax.swing.JPanel();
		extraClericSlotsBaseButton = new javax.swing.JButton();
		extraClericSlotsAdjustmentButton = new javax.swing.JButton();
		extraMageBasePanel = new javax.swing.JPanel();
		extraMageSlotsBaseButton = new javax.swing.JButton();
		extraMageSlotsAdjustmentButton = new javax.swing.JButton();
		checkBoxPanel = new javax.swing.JPanel();
		fighterConBonusCheckBox = new javax.swing.JCheckBox();
		weaponMasteryCheckBox = new javax.swing.JCheckBox();
		barbarianConBonusCheckBox = new javax.swing.JCheckBox();
		specializeCheckBox = new javax.swing.JCheckBox();
		barbarianDexBonusCheckBox = new javax.swing.JCheckBox();
		doubleSpecializeCheckBox = new javax.swing.JCheckBox();
		constitutionIronCheckBox = new javax.swing.JCheckBox();
		constitutionResistanceCheckBox = new javax.swing.JCheckBox();
		profsPanel = new javax.swing.JPanel();
		bonusWeaponProfLabel = new javax.swing.JLabel();
		extraWeaponProfSpinner = new javax.swing.JSpinner();
		bonusNonWeaponProfLabel = new javax.swing.JLabel();
		extraNonWeaponProfSpinner = new javax.swing.JSpinner();
		jPanel1 = new javax.swing.JPanel();
		doneButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Extra Abilties");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosed(java.awt.event.WindowEvent evt) {
				formWindowClosed(evt);
			}
		});

		mainPanel.setBackground(new java.awt.Color(153, 153, 153));
		mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),
						1, true), "Extra Ability",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Segoe UI", 0, 12)));
		mainPanel.setLayout(new java.awt.GridBagLayout());

		extraNameLabel.setFont(new java.awt.Font("Segoe UI", 0, 10));
		extraNameLabel.setText("Name");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 3);
		mainPanel.add(extraNameLabel, gridBagConstraints);

		extraNameTextField.setFont(new java.awt.Font("Segoe UI", 0, 12));
		extraNameTextField.setText("extra-ability-name-here");
		extraNameTextField.setPreferredSize(new java.awt.Dimension(150, 22));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		mainPanel.add(extraNameTextField, gridBagConstraints);

		extraDescriptionButton.setFont(new java.awt.Font("Segoe UI", 0, 12));
		extraDescriptionButton.setText("set description");
		extraDescriptionButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						extraDescriptionButtonActionPerformed(evt);
					}
				});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		mainPanel.add(extraDescriptionButton, gridBagConstraints);

		jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 10));
		jLabel1.setText("Type");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
		mainPanel.add(jLabel1, gridBagConstraints);

		extraTypeComboBox.setFont(new java.awt.Font("Segoe UI", 0, 12));
		extraTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		mainPanel.add(extraTypeComboBox, gridBagConstraints);

		savesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),
						1, true), "Saves",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Segoe UI", 0, 10)));

		savesButton.setFont(new java.awt.Font("Segoe UI", 0, 12));
		savesButton.setText("base");
		savesButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				savesButtonActionPerformed(evt);
			}
		});
		savesPanel.add(savesButton);

		saveAdjustmentsButton.setFont(new java.awt.Font("Segoe UI", 0, 12));
		saveAdjustmentsButton.setText("adjustment");
		saveAdjustmentsButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						saveAdjustmentsButtonActionPerformed(evt);
					}
				});
		savesPanel.add(saveAdjustmentsButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		mainPanel.add(savesPanel, gridBagConstraints);

		abilityScoresPanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(new javax.swing.border.LineBorder(
						new java.awt.Color(0, 0, 0), 1, true),
						"Ability Scores",
						javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
						javax.swing.border.TitledBorder.DEFAULT_POSITION,
						new java.awt.Font("Segoe UI", 0, 10)));

		abilityScoreAdjustmentsButton.setFont(new java.awt.Font("Segoe UI", 0,
				12));
		abilityScoreAdjustmentsButton.setText("adjustment");
		abilityScoreAdjustmentsButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						abilityScoreAdjustmentsButtonActionPerformed(evt);
					}
				});
		abilityScoresPanel.add(abilityScoreAdjustmentsButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		mainPanel.add(abilityScoresPanel, gridBagConstraints);

		extraThiefBasePanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(new javax.swing.border.LineBorder(
						new java.awt.Color(0, 0, 0), 1, true), "Thief Skills",
						javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
						javax.swing.border.TitledBorder.DEFAULT_POSITION,
						new java.awt.Font("Segoe UI", 0, 10)));
		extraThiefBasePanel.setLayout(new java.awt.FlowLayout(
				java.awt.FlowLayout.LEFT, 0, 0));

		extraThiefSkillsBaseButton
				.setFont(new java.awt.Font("Segoe UI", 0, 12));
		extraThiefSkillsBaseButton.setText("base");
		extraThiefSkillsBaseButton
				.setToolTipText("Set base thief skills to this.  Only useful if thief skills are not granted by ANYTHING else.");
		extraThiefSkillsBaseButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						extraThiefSkillsBaseButtonActionPerformed(evt);
					}
				});
		extraThiefBasePanel.add(extraThiefSkillsBaseButton);

		extraThiefSkillsAdjustmentButton.setFont(new java.awt.Font("Segoe UI",
				0, 12));
		extraThiefSkillsAdjustmentButton.setText("adjustment");
		extraThiefSkillsAdjustmentButton
				.setToolTipText("Bonus or penalties applied to thief skills.");
		extraThiefSkillsAdjustmentButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						extraThiefSkillsAdjustmentButtonActionPerformed(evt);
					}
				});
		extraThiefBasePanel.add(extraThiefSkillsAdjustmentButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		mainPanel.add(extraThiefBasePanel, gridBagConstraints);

		extraClericBasePanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(new javax.swing.border.LineBorder(
						new java.awt.Color(0, 0, 0), 1, true), "Cleric Spells",
						javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
						javax.swing.border.TitledBorder.DEFAULT_POSITION,
						new java.awt.Font("Segoe UI", 0, 10)));
		extraClericBasePanel.setLayout(new java.awt.FlowLayout(
				java.awt.FlowLayout.LEFT, 0, 0));

		extraClericSlotsBaseButton
				.setFont(new java.awt.Font("Segoe UI", 0, 12));
		extraClericSlotsBaseButton.setText("base");
		extraClericSlotsBaseButton
				.setToolTipText("Set base cleric spells per level to this.  Only useful if cleric spells are not granted by ANYTHING else.");
		extraClericSlotsBaseButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						extraClericSlotsBaseButtonActionPerformed(evt);
					}
				});
		extraClericBasePanel.add(extraClericSlotsBaseButton);

		extraClericSlotsAdjustmentButton.setFont(new java.awt.Font("Segoe UI",
				0, 12));
		extraClericSlotsAdjustmentButton.setText("adjustment");
		extraClericSlotsAdjustmentButton
				.setToolTipText("Bonus or penalty spells per level applied.");
		extraClericSlotsAdjustmentButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						extraClericSlotsAdjustmentButtonActionPerformed(evt);
					}
				});
		extraClericBasePanel.add(extraClericSlotsAdjustmentButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 4;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		mainPanel.add(extraClericBasePanel, gridBagConstraints);

		extraMageBasePanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(new javax.swing.border.LineBorder(
						new java.awt.Color(0, 0, 0), 1, true),
						"Magic-User Spells",
						javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
						javax.swing.border.TitledBorder.DEFAULT_POSITION,
						new java.awt.Font("Segoe UI", 0, 10)));
		extraMageBasePanel.setLayout(new java.awt.FlowLayout(
				java.awt.FlowLayout.LEFT, 0, 0));

		extraMageSlotsBaseButton.setFont(new java.awt.Font("Segoe UI", 0, 12));
		extraMageSlotsBaseButton.setText("base");
		extraMageSlotsBaseButton
				.setToolTipText("Set base magic-user spells per level to this.  Only useful if magic-user spells are not granted by ANYTHING else");
		extraMageSlotsBaseButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						extraMageSlotsBaseButtonActionPerformed(evt);
					}
				});
		extraMageBasePanel.add(extraMageSlotsBaseButton);

		extraMageSlotsAdjustmentButton.setFont(new java.awt.Font("Segoe UI", 0,
				12));
		extraMageSlotsAdjustmentButton.setText("adjustment");
		extraMageSlotsAdjustmentButton
				.setToolTipText("Bonus or penalty spells per level applied.");
		extraMageSlotsAdjustmentButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						extraMageSlotsAdjustmentButtonActionPerformed(evt);
					}
				});
		extraMageBasePanel.add(extraMageSlotsAdjustmentButton);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		mainPanel.add(extraMageBasePanel, gridBagConstraints);

		checkBoxPanel.setLayout(new java.awt.GridLayout(0, 2));

		fighterConBonusCheckBox
				.setBackground(new java.awt.Color(153, 153, 153));
		conBonusButtonGroup.add(fighterConBonusCheckBox);
		fighterConBonusCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 10));
		fighterConBonusCheckBox.setText("fighter consitution");
		fighterConBonusCheckBox
				.setToolTipText("Improved consitution bonuses for health.");
		checkBoxPanel.add(fighterConBonusCheckBox);

		weaponMasteryCheckBox.setBackground(new java.awt.Color(153, 153, 153));
		weaponMasteryCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 10));
		weaponMasteryCheckBox.setText("weapon mastery");
		weaponMasteryCheckBox.setToolTipText("Allowed to use weapon mastery.");
		weaponMasteryCheckBox.setEnabled(false);
		checkBoxPanel.add(weaponMasteryCheckBox);

		barbarianConBonusCheckBox.setBackground(new java.awt.Color(153, 153,
				153));
		conBonusButtonGroup.add(barbarianConBonusCheckBox);
		barbarianConBonusCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 10));
		barbarianConBonusCheckBox.setText("barbarian consitution");
		barbarianConBonusCheckBox
				.setToolTipText("+2 constitution HP bonus for every point above 14.");
		checkBoxPanel.add(barbarianConBonusCheckBox);

		specializeCheckBox.setBackground(new java.awt.Color(153, 153, 153));
		specializeCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 10));
		specializeCheckBox.setText("can specialize");
		checkBoxPanel.add(specializeCheckBox);

		barbarianDexBonusCheckBox.setBackground(new java.awt.Color(153, 153,
				153));
		barbarianDexBonusCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 10));
		barbarianDexBonusCheckBox.setText("barbarian dexterity");
		barbarianDexBonusCheckBox
				.setToolTipText("+1 Armor for every point above 14.");
		checkBoxPanel.add(barbarianDexBonusCheckBox);

		doubleSpecializeCheckBox
				.setBackground(new java.awt.Color(153, 153, 153));
		doubleSpecializeCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 10));
		doubleSpecializeCheckBox.setText("can double specialize");
		doubleSpecializeCheckBox
				.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
		checkBoxPanel.add(doubleSpecializeCheckBox);

		constitutionIronCheckBox
				.setBackground(new java.awt.Color(153, 153, 153));
		constitutionIronCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 10));
		constitutionIronCheckBox.setText("iron constutition");
		constitutionIronCheckBox
				.setToolTipText("+1 to poison saves for every 3.5 points of constitution");
		constitutionIronCheckBox
				.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
		checkBoxPanel.add(constitutionIronCheckBox);

		constitutionResistanceCheckBox.setBackground(new java.awt.Color(153,
				153, 153));
		constitutionResistanceCheckBox.setFont(new java.awt.Font("Segoe UI", 0,
				10));
		constitutionResistanceCheckBox.setText("highly resistant");
		constitutionResistanceCheckBox
				.setToolTipText("+1 to spells, rod/staff/wand saves for every 3.5 points of constitution");
		constitutionResistanceCheckBox
				.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
		checkBoxPanel.add(constitutionResistanceCheckBox);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 6;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		mainPanel.add(checkBoxPanel, gridBagConstraints);

		profsPanel.setBackground(new java.awt.Color(153, 153, 153));

		bonusWeaponProfLabel.setFont(new java.awt.Font("Segoe UI", 0, 10));
		bonusWeaponProfLabel.setText("Weapon Profs");
		bonusWeaponProfLabel.setToolTipText("Bonus weapon proficiency slot.");
		profsPanel.add(bonusWeaponProfLabel);

		extraWeaponProfSpinner.setModel(new javax.swing.SpinnerNumberModel(0,
				0, 99, 1));
		profsPanel.add(extraWeaponProfSpinner);

		bonusNonWeaponProfLabel.setFont(new java.awt.Font("Segoe UI", 0, 10));
		bonusNonWeaponProfLabel.setText("Non-Weapon Profs");
		bonusNonWeaponProfLabel
				.setToolTipText("Bonus non-weapon proficiency slot.");
		profsPanel.add(bonusNonWeaponProfLabel);

		extraNonWeaponProfSpinner.setModel(new javax.swing.SpinnerNumberModel(
				0, 0, 99, 1));
		profsPanel.add(extraNonWeaponProfSpinner);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 5;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		mainPanel.add(profsPanel, gridBagConstraints);

		jScrollPane2.setViewportView(mainPanel);

		getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

		jPanel1.setBackground(new java.awt.Color(204, 204, 204));
		jPanel1.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		doneButton.setFont(new java.awt.Font("Segoe UI", 0, 12));
		doneButton.setText("done");
		doneButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				doneButtonActionPerformed(evt);
			}
		});
		jPanel1.add(doneButton);

		getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	private void abilityScoreAdjustmentsButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		Option_AskFor_AbilityScores dDialog = new Option_AskFor_AbilityScores(
				parent, true, ost, "Ability Score Adjustments",
				currentExtraAbility.getAbilityScoreAdjustments(), false);
		dDialog.setVisible(true);
	}

	private void saveAdjustmentsButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		Option_AskFor_Saves dDialog = new Option_AskFor_Saves(parent, true,
				ost, "Save Adjustments",
				currentExtraAbility.getSaveAdjustments(), null, SAVES,
				SAVES_ABBREV);
		dDialog.setVisible(true);
	}

	private void savesButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		Option_AskFor_Saves dDialog = new Option_AskFor_Saves(parent, true,
				ost, "Base Saves", currentExtraAbility.getSaves(), null, SAVES,
				SAVES_ABBREV);
		dDialog.setVisible(true);
	}

	private void extraDescriptionButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Option_AskFor_Description nDialogDescription = new Option_AskFor_Description(
				ost.mainFrame, true, ost, "Extra Description",
				currentExtraAbility.getDescription());

		nDialogDescription.setVisible(true);
		currentExtraAbility.setDescription(nDialogDescription.getDescription());
	}

	private void extraClericSlotsAdjustmentButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Option_AskFor_SpellSlots nDialog = new Option_AskFor_SpellSlots(
				ost.mainFrame, true, ost,
				"Extra Cleric Spell Slots Adjustments",
				currentExtraAbility.getClericSpellsBonus(), CLERIC_SPELL_NAMES,
				CLERIC_SPELL_NAMES_ABBREV);

		nDialog.setVisible(true);

	}

	private void extraClericSlotsBaseButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Option_AskFor_SpellSlots nDialog = new Option_AskFor_SpellSlots(
				ost.mainFrame, true, ost, "Extra Cleric Spell Slots Base",
				currentExtraAbility.getClericSpellsBase(), CLERIC_SPELL_NAMES,
				CLERIC_SPELL_NAMES_ABBREV);

		nDialog.setVisible(true);

	}

	private void extraMageSlotsAdjustmentButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Option_AskFor_SpellSlots nDialog = new Option_AskFor_SpellSlots(
				ost.mainFrame, true, ost, "Extra Mage Spell Slots Adjustments",
				currentExtraAbility.getMageSpellsBonus(), MAGE_SPELL_NAMES,
				MAGE_SPELL_NAMES_ABBREV);

		nDialog.setVisible(true);
	}

	private void extraMageSlotsBaseButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Option_AskFor_SpellSlots nDialog = new Option_AskFor_SpellSlots(
				ost.mainFrame, true, ost, "Extra Mage Spell Slots Base",
				currentExtraAbility.getMageSpellsBase(), MAGE_SPELL_NAMES,
				MAGE_SPELL_NAMES_ABBREV);

		nDialog.setVisible(true);
	}

	private void extraThiefSkillsAdjustmentButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Option_AskFor_ThiefSkills nDialog = new Option_AskFor_ThiefSkills(
				ost.mainFrame, true, ost, "Extra Thief Ability Adjustments",
				currentExtraAbility.getThiefSkillsBonus());

		nDialog.setVisible(true);
	}

	private void extraThiefSkillsBaseButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Option_AskFor_ThiefSkills nDialog = new Option_AskFor_ThiefSkills(
				ost.mainFrame, true, ost, "Extra Thief Ability Base",
				currentExtraAbility.getThiefSkillsBase());

		nDialog.setVisible(true);
	}

	private void formWindowClosed(java.awt.event.WindowEvent evt) {
		getUpdatedValuesToCurrent();
	}

	private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {
		formWindowClosed(null);
		setVisible(false);
	}

	public void getUpdatedValuesToCurrent() {
		currentExtraAbility.setName(extraNameTextField.getText());
		currentExtraAbility.setType(extraTypeComboBox.getSelectedIndex());
		currentExtraAbility.setBonusWeaponProfs((int) extraWeaponProfSpinner
				.getValue());
		currentExtraAbility
				.setBonusNonWeaponProfs((int) extraNonWeaponProfSpinner
						.getValue());
		currentExtraAbility.setAllowedSpecialize(specializeCheckBox
				.isSelected());
		currentExtraAbility.setAllowedDoubeSpecialize(doubleSpecializeCheckBox
				.isSelected());
		currentExtraAbility.setBarbarianConBonus(barbarianConBonusCheckBox
				.isSelected());
		currentExtraAbility.setBarbarianDexBonus(barbarianDexBonusCheckBox
				.isSelected());
		currentExtraAbility.setFighterConBonus(fighterConBonusCheckBox
				.isSelected());
		currentExtraAbility.setAllowedIronCon(constitutionIronCheckBox.isSelected());
		currentExtraAbility.setAllowedResistanceCon(constitutionResistanceCheckBox.isSelected());

	}

	public void updateExtraAbilityPanel(ExtraAbilitiesClass oE) {
		if (oE != null) {
			currentExtraAbility = oE;

			extraNameTextField.setText(oE.getName());
			extraWeaponProfSpinner.setValue(oE.getBonusWeaponProfs());
			extraNonWeaponProfSpinner.setValue(oE.getBonusNonWeaponProfs());

			specializeCheckBox.setSelected(oE.isAllowedSpecialize());
			doubleSpecializeCheckBox.setSelected(oE.isAllowedDoubeSpecialize());
			barbarianConBonusCheckBox.setSelected(oE.isBarbarianConBonus());
			barbarianDexBonusCheckBox.setSelected(oE.isBarbarianDexBonus());
			fighterConBonusCheckBox.setSelected(oE.isFighterConBonus());
			weaponMasteryCheckBox.setSelected(oE.allowedWeaponMastery);
			constitutionIronCheckBox.setSelected(oE.isAllowedIronCon());
			constitutionResistanceCheckBox.setSelected(oE.isAllowedResistanceCon());
			extraTypeComboBox.setSelectedIndex(oE.getType());
			
		}
		mainPanel.validate();
		mainPanel.repaint();
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton abilityScoreAdjustmentsButton;
	private javax.swing.JPanel abilityScoresPanel;
	private javax.swing.JCheckBox barbarianConBonusCheckBox;
	private javax.swing.JCheckBox barbarianDexBonusCheckBox;
	private javax.swing.JLabel bonusNonWeaponProfLabel;
	private javax.swing.JLabel bonusWeaponProfLabel;
	private javax.swing.JPanel checkBoxPanel;
	private javax.swing.ButtonGroup conBonusButtonGroup;
	private javax.swing.JCheckBox constitutionIronCheckBox;
	private javax.swing.JCheckBox constitutionResistanceCheckBox;
	private javax.swing.JButton doneButton;
	private javax.swing.JCheckBox doubleSpecializeCheckBox;
	private javax.swing.JPanel extraClericBasePanel;
	private javax.swing.JButton extraClericSlotsAdjustmentButton;
	private javax.swing.JButton extraClericSlotsBaseButton;
	private javax.swing.JButton extraDescriptionButton;
	private javax.swing.JPanel extraMageBasePanel;
	private javax.swing.JButton extraMageSlotsAdjustmentButton;
	private javax.swing.JButton extraMageSlotsBaseButton;
	private javax.swing.JLabel extraNameLabel;
	private javax.swing.JTextField extraNameTextField;
	private javax.swing.JSpinner extraNonWeaponProfSpinner;
	private javax.swing.JPanel extraThiefBasePanel;
	private javax.swing.JButton extraThiefSkillsAdjustmentButton;
	private javax.swing.JButton extraThiefSkillsBaseButton;
	private javax.swing.JComboBox extraTypeComboBox;
	private javax.swing.JSpinner extraWeaponProfSpinner;
	private javax.swing.JCheckBox fighterConBonusCheckBox;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JPanel profsPanel;
	private javax.swing.JButton saveAdjustmentsButton;
	private javax.swing.JButton savesButton;
	private javax.swing.JPanel savesPanel;
	private javax.swing.JCheckBox specializeCheckBox;
	private javax.swing.JCheckBox weaponMasteryCheckBox;
	// End of variables declaration//GEN-END:variables
	private ExtraAbilitiesClass currentExtraAbility;
}
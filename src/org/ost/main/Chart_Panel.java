/*
 * Chart_Panel.java
 *
 * Created on __DATE__, __TIME__
 */

package org.ost.main;

import javax.swing.*;
import javax.swing.plaf.basic.BasicButtonUI;

import org.ost.main.MyClasses.ChartClass;

import java.awt.*;
import java.awt.event.*;

/**
 *
 * @author  __USER__
 */
public class Chart_Panel extends javax.swing.JPanel {
	/** Creates new form Chart_Panel */
	public Chart_Panel(ChartClass incChart) {
		this.oC = incChart;
		initComponents();
		chartDescriptionTextArea.setText(oC.getDescription());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		chartLayoutPanel = new javax.swing.JScrollPane();
		jPanel1 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		chartDescriptionTextArea = new javax.swing.JTextArea();

		setBackground(new java.awt.Color(204, 204, 204));
		setBorder(javax.swing.BorderFactory
				.createTitledBorder(javax.swing.BorderFactory
						.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
		setPreferredSize(new java.awt.Dimension(600, 400));
		setLayout(new java.awt.BorderLayout());

		chartLayoutPanel.setBackground(new java.awt.Color(204, 204, 204));
		add(chartLayoutPanel, java.awt.BorderLayout.CENTER);

		jPanel1.setLayout(new java.awt.BorderLayout());

		jScrollPane1.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

		chartDescriptionTextArea
				.setBackground(new java.awt.Color(204, 204, 204));
		chartDescriptionTextArea.setColumns(20);
		chartDescriptionTextArea.setEditable(false);
		chartDescriptionTextArea.setFont(new java.awt.Font("Segoe UI", 0, 10));
		chartDescriptionTextArea.setLineWrap(true);
		chartDescriptionTextArea.setRows(5);
		chartDescriptionTextArea.setWrapStyleWord(true);
		jScrollPane1.setViewportView(chartDescriptionTextArea);

		jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

		add(jPanel1, java.awt.BorderLayout.PAGE_END);
	}// </editor-fold>
	//GEN-END:initComponents

	/**
	 * Component to be used as tabComponent;
	 * Contains a JLabel to show the text and
	 * a JButton to close the tab it belongs to
	 */
	public class ButtonTabComponent extends JPanel {
		private final JTabbedPane pane;

		public ButtonTabComponent(final JTabbedPane pane) {
			//unset default FlowLayout' gaps
			super(new FlowLayout(FlowLayout.LEFT, 0, 0));
			if (pane == null) {
				throw new NullPointerException("TabbedPane is null");
			}
			this.pane = pane;
			setOpaque(false);

			//make JLabel read titles from JTabbedPane
			JLabel label = new JLabel() {
				public String getText() {
					int i = pane.indexOfTabComponent(ButtonTabComponent.this);
					if (i != -1) {
						return pane.getTitleAt(i);
					}
					return null;
				}
			};

			add(label);
			//add more space between the label and the button
			label.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 5));
			//tab button
			JButton button = new TabButton();
			add(button);
			//add more space to the top of the component
			setBorder(BorderFactory.createEmptyBorder(2, 0, 0, 0));
		}

		private class TabButton extends JButton implements ActionListener {
			public TabButton() {
				int size = 17;
				setPreferredSize(new Dimension(size, size));
				setToolTipText("close this tab");
				//Make the button looks the same for all Laf's
				setUI(new BasicButtonUI());
				//Make it transparent
				setContentAreaFilled(false);
				//No need to be focusable
				setFocusable(false);
				setBorder(BorderFactory.createEtchedBorder());
				setBorderPainted(false);
				//Making nice rollover effect
				//we use the same listener for all buttons
				addMouseListener(buttonMouseListener);
				setRolloverEnabled(true);
				//Close the proper tab by clicking the button
				addActionListener(this);
			}

			public void actionPerformed(ActionEvent e) {
				int i = pane.indexOfTabComponent(ButtonTabComponent.this);
				if (i != -1) {
					pane.remove(i);
				}
			}

			//we don't want to update UI for this button
			public void updateUI() {
			}

			//paint the cross
			protected void paintComponent(Graphics g) {
				super.paintComponent(g);
				Graphics2D g2 = (Graphics2D) g.create();
				//shift the image for pressed buttons
				if (getModel().isPressed()) {
					g2.translate(1, 1);
				}
				g2.setStroke(new BasicStroke(2));
				g2.setColor(Color.BLACK);
				if (getModel().isRollover()) {
					g2.setColor(Color.MAGENTA);
				}
				int delta = 6;
				g2.drawLine(delta, delta, getWidth() - delta - 1, getHeight()
						- delta - 1);
				g2.drawLine(getWidth() - delta - 1, delta, delta, getHeight()
						- delta - 1);
				g2.dispose();
			}
		}

		//	    private final static MouseListener buttonMouseListener = new MouseAdapter() {
		private final MouseListener buttonMouseListener = new MouseAdapter() {
			public void mouseEntered(MouseEvent e) {
				Component component = e.getComponent();
				if (component instanceof AbstractButton) {
					AbstractButton button = (AbstractButton) component;
					button.setBorderPainted(true);
				}
			}

			public void mouseExited(MouseEvent e) {
				Component component = e.getComponent();
				if (component instanceof AbstractButton) {
					AbstractButton button = (AbstractButton) component;
					button.setBorderPainted(false);
				}
			}
		};
	} // end ButtonTabComponent

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JTextArea chartDescriptionTextArea;
	public javax.swing.JScrollPane chartLayoutPanel;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables

	private ChartClass oC;
}
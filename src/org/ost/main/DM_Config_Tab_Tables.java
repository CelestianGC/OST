/*
 * DM_Config_Tab_Tables.java
 *
 * Created on __DATE__, __TIME__
 */

package org.ost.main;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.text.NumberFormatter;

import org.jdom.Document;
import org.jdom.Element;
import org.ost.main.Chart_Panel.ButtonTabComponent;
import org.ost.main.MyClasses.MyCellRendererList;
import org.ost.main.MyClasses.TableClass;
import org.ost.main.MyClasses.TableList;
import org.ost.main.MyClasses.TableRewardClass;
import org.ost.main.MyClasses.TreasureTableClass;
import org.ost.main.MyUtils.MyParse;
import org.ost.main.MyUtils.MyRandomClass;
import org.ost.main.MyUtils.SimpleDialog;
import org.ost.main.MyUtils.Utils;
import org.ost.main.MyUtils.XMLControl;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

/**
 *
 * @author  __USER__
 */
public class DM_Config_Tab_Tables extends javax.swing.JPanel {

	/** Creates new form DM_Config_Tab_Tables */
	public DM_Config_Tab_Tables(MainClass ost) {
		this.ost = ost;
		initComponents();
		updateCurrentTable((TableClass) tablesListComboBox.getSelectedItem());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		tableReferToComboBox = new javax.swing.JComboBox();
		tableImportDialog = new javax.swing.JDialog();
		jPanel13 = new javax.swing.JPanel();
		jLabel5 = new javax.swing.JLabel();
		jPanel8 = new javax.swing.JPanel();
		jScrollPane3 = new javax.swing.JScrollPane();
		tableImportTextArea = new javax.swing.JTextArea();
		jPanel9 = new javax.swing.JPanel();
		tableImportOSTRadioButton = new javax.swing.JRadioButton();
		tableImportTXTRadioButton = new javax.swing.JRadioButton();
		tableImportPasteFromClipboardButton = new javax.swing.JButton();
		tableImportImportButton = new javax.swing.JButton();
		tableImportDoneButton = new javax.swing.JButton();
		tableImportbuttonGroup = new javax.swing.ButtonGroup();
		tableImportbuttonGroup.add(tableImportOSTRadioButton);
		tableImportbuttonGroup.add(tableImportTXTRadioButton);
		tableExportDialog = new javax.swing.JDialog();
		jPanel12 = new javax.swing.JPanel();
		jLabel4 = new javax.swing.JLabel();
		jPanel10 = new javax.swing.JPanel();
		jScrollPane4 = new javax.swing.JScrollPane();
		tableExportTextArea = new javax.swing.JTextArea();
		jPanel11 = new javax.swing.JPanel();
		tableCopyToClipBoardButton = new javax.swing.JButton();
		tableExportDoneButton = new javax.swing.JButton();
		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jPanel6 = new javax.swing.JPanel();
		tablesListComboBox = new javax.swing.JComboBox();
		jPanel3 = new javax.swing.JPanel();
		tableNewButton = new javax.swing.JButton();
		tableDeleteButton = new javax.swing.JButton();
		tableSaveButton = new javax.swing.JButton();
		tableImportButton = new javax.swing.JButton();
		tableExportButton = new javax.swing.JButton();
		jPanel4 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		tableNameTextField = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		tableDescTextField = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		tableTypeTextField = new javax.swing.JTextField();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jPanel7 = new javax.swing.JPanel();
		jPanel5 = new javax.swing.JPanel();
		tableInsertRowButton = new javax.swing.JButton();
		tableAddRowButton = new javax.swing.JButton();
		tableDeleteRowButton = new javax.swing.JButton();
		tableClearEmptyButton = new javax.swing.JButton();
		tableClearButton = new javax.swing.JButton();
		tableTestButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		numberFormat = new NumberFormatter();
		numberFormat.setMinimum(new Integer(1));
		numberFormat.setAllowsInvalid(false);

		tableListTable = new javax.swing.JTable();

		tableReferToComboBox.setModel(getTableListReferToForComboBox());
		tableReferToComboBox.setRenderer(new MyCellRendererList());

		tableImportDialog.setTitle("Import Table");
		tableImportDialog.setMinimumSize(new java.awt.Dimension(445, 345));

		jPanel13.setBackground(new java.awt.Color(204, 204, 204));
		jPanel13.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 15));
		jLabel5.setText("Paste the table to import below.");
		jPanel13.add(jLabel5);

		tableImportDialog.getContentPane().add(jPanel13,
				java.awt.BorderLayout.PAGE_START);

		jPanel8.setBackground(new java.awt.Color(204, 204, 204));
		jPanel8.setLayout(new java.awt.BorderLayout());

		tableImportTextArea.setColumns(20);
		tableImportTextArea.setLineWrap(true);
		tableImportTextArea.setRows(5);
		tableImportTextArea.setWrapStyleWord(true);
		jScrollPane3.setViewportView(tableImportTextArea);

		jPanel8.add(jScrollPane3, java.awt.BorderLayout.CENTER);

		tableImportDialog.getContentPane().add(jPanel8,
				java.awt.BorderLayout.CENTER);

		jPanel9.setBackground(new java.awt.Color(204, 204, 204));
		jPanel9.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		tableImportOSTRadioButton.setBackground(new java.awt.Color(204, 204,
				204));
		tableImportOSTRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableImportOSTRadioButton.setSelected(true);
		tableImportOSTRadioButton.setText("OST");
		tableImportOSTRadioButton
				.setToolTipText("Import text that has been exported from OST.");
		tableImportOSTRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableImportOSTRadioButtonActionPerformed(evt);
					}
				});
		jPanel9.add(tableImportOSTRadioButton);

		tableImportTXTRadioButton.setBackground(new java.awt.Color(204, 204,
				204));
		tableImportTXTRadioButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableImportTXTRadioButton.setText("Text");
		tableImportTXTRadioButton
				.setToolTipText("Import a table from PDF or some other text source and try to convert to a table.");
		tableImportTXTRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableImportTXTRadioButtonActionPerformed(evt);
					}
				});
		jPanel9.add(tableImportTXTRadioButton);

		tableImportPasteFromClipboardButton.setBackground(new java.awt.Color(
				204, 204, 204));
		tableImportPasteFromClipboardButton.setFont(new java.awt.Font(
				"Segoe UI", 0, 10));
		tableImportPasteFromClipboardButton.setText("paste from clipboard");
		tableImportPasteFromClipboardButton
				.setToolTipText("Paste all data in clipboard.");
		tableImportPasteFromClipboardButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableImportPasteFromClipboardButtonActionPerformed(evt);
					}
				});
		jPanel9.add(tableImportPasteFromClipboardButton);

		tableImportImportButton
				.setBackground(new java.awt.Color(204, 204, 204));
		tableImportImportButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableImportImportButton.setText("import");
		tableImportImportButton
				.setToolTipText("Import a table you have pasted into the text area above.");
		tableImportImportButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableImportImportButtonActionPerformed(evt);
					}
				});
		jPanel9.add(tableImportImportButton);

		tableImportDoneButton.setBackground(new java.awt.Color(204, 204, 204));
		tableImportDoneButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableImportDoneButton.setText("cancel");
		tableImportDoneButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableImportDoneButtonActionPerformed(evt);
					}
				});
		jPanel9.add(tableImportDoneButton);

		tableImportDialog.getContentPane().add(jPanel9,
				java.awt.BorderLayout.PAGE_END);

		tableExportDialog.setTitle("Export Table");
		tableExportDialog.setMinimumSize(new java.awt.Dimension(445, 345));

		jPanel12.setBackground(new java.awt.Color(204, 204, 204));
		jPanel12.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 15));
		jLabel4.setText("Copy the text below to export table.");
		jPanel12.add(jLabel4);

		tableExportDialog.getContentPane().add(jPanel12,
				java.awt.BorderLayout.PAGE_START);

		jPanel10.setBackground(new java.awt.Color(204, 204, 204));
		jPanel10.setLayout(new java.awt.BorderLayout());

		tableExportTextArea.setColumns(20);
		tableExportTextArea.setEditable(false);
		tableExportTextArea.setLineWrap(true);
		tableExportTextArea.setRows(5);
		tableExportTextArea
				.setToolTipText("Copy and paste for others to import this table.");
		tableExportTextArea.setWrapStyleWord(true);
		jScrollPane4.setViewportView(tableExportTextArea);

		jPanel10.add(jScrollPane4, java.awt.BorderLayout.CENTER);

		tableExportDialog.getContentPane().add(jPanel10,
				java.awt.BorderLayout.CENTER);

		jPanel11.setBackground(new java.awt.Color(204, 204, 204));
		jPanel11.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		tableCopyToClipBoardButton.setBackground(new java.awt.Color(204, 204,
				204));
		tableCopyToClipBoardButton
				.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableCopyToClipBoardButton.setText("copy to clipboard");
		tableCopyToClipBoardButton
				.setToolTipText("Copy all data in export window to clipboard.");
		tableCopyToClipBoardButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableCopyToClipBoardButtonActionPerformed(evt);
					}
				});
		jPanel11.add(tableCopyToClipBoardButton);

		tableExportDoneButton.setBackground(new java.awt.Color(204, 204, 204));
		tableExportDoneButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableExportDoneButton.setText("done");
		tableExportDoneButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableExportDoneButtonActionPerformed(evt);
					}
				});
		jPanel11.add(tableExportDoneButton);

		tableExportDialog.getContentPane().add(jPanel11,
				java.awt.BorderLayout.PAGE_END);

		setLayout(new java.awt.BorderLayout());

		jPanel1.setBackground(new java.awt.Color(153, 153, 153));

		jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(
				new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),
						3, true), "Tables"));

		tablesListComboBox.setModel(getTableListForComboBox());
		tablesListComboBox.setRenderer(new MyCellRendererList());
		tablesListComboBox
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tablesListComboBoxActionPerformed(evt);
					}
				});

		jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0,
				0));

		tableNewButton.setBackground(new java.awt.Color(204, 204, 204));
		tableNewButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableNewButton.setText("new table");
		tableNewButton.setToolTipText("Create a new table.");
		tableNewButton.setPreferredSize(new java.awt.Dimension(83, 23));
		tableNewButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				tableNewButtonActionPerformed(evt);
			}
		});
		jPanel3.add(tableNewButton);

		tableDeleteButton.setBackground(new java.awt.Color(204, 204, 204));
		tableDeleteButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableDeleteButton.setForeground(new java.awt.Color(153, 0, 0));
		tableDeleteButton.setText("delete table");
		tableDeleteButton.setToolTipText("Delete currently selected table.");
		tableDeleteButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableDeleteButtonActionPerformed(evt);
					}
				});
		jPanel3.add(tableDeleteButton);

		tableSaveButton.setBackground(new java.awt.Color(204, 204, 204));
		tableSaveButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableSaveButton.setText("save");
		tableSaveButton.setToolTipText("Save all table changes.");
		tableSaveButton.setPreferredSize(new java.awt.Dimension(83, 23));
		tableSaveButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				tableSaveButtonActionPerformed(evt);
			}
		});
		jPanel3.add(tableSaveButton);

		tableImportButton.setBackground(new java.awt.Color(204, 204, 204));
		tableImportButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableImportButton.setText("import");
		tableImportButton.setToolTipText("Import a OST exported table.");
		tableImportButton.setPreferredSize(new java.awt.Dimension(83, 23));
		tableImportButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableImportButtonActionPerformed(evt);
					}
				});
		jPanel3.add(tableImportButton);

		tableExportButton.setBackground(new java.awt.Color(204, 204, 204));
		tableExportButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableExportButton.setText("export");
		tableExportButton.setPreferredSize(new java.awt.Dimension(83, 23));
		tableExportButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableExportButtonActionPerformed(evt);
					}
				});
		jPanel3.add(tableExportButton);

		jPanel4.setLayout(new java.awt.GridBagLayout());

		jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 10));
		jLabel1.setText("Name");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		jPanel4.add(jLabel1, gridBagConstraints);

		tableNameTextField.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableNameTextField.setText("NewTable");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 40.0;
		jPanel4.add(tableNameTextField, gridBagConstraints);

		jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 10));
		jLabel3.setText("Description");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		jPanel4.add(jLabel3, gridBagConstraints);

		tableDescTextField.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableDescTextField.setText("Description of new table.");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel4.add(tableDescTextField, gridBagConstraints);

		jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 10));
		jLabel2.setText("Type");
		jLabel2.setToolTipText("Type of Table, ALL, TREASURE, COMBAT or OTHER");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.weightx = 1.0;
		jPanel4.add(jLabel2, gridBagConstraints);

		tableTypeTextField.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableTypeTextField.setText("GENERAL");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		jPanel4.add(tableTypeTextField, gridBagConstraints);

		jScrollPane2.setBorder(null);
		jScrollPane2
				.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPane2
				.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

		jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
		jTextArea1.setColumns(20);
		jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 12));
		jTextArea1.setLineWrap(true);
		jTextArea1.setRows(5);
		jTextArea1
				.setText("WARNING: Review the README.txt before renaming included Magic Item tables.");
		jTextArea1.setWrapStyleWord(true);
		jTextArea1.setBorder(null);
		jScrollPane2.setViewportView(jTextArea1);

		javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(
				jPanel6);
		jPanel6.setLayout(jPanel6Layout);
		jPanel6Layout
				.setHorizontalGroup(jPanel6Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel6Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel6Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.TRAILING)
														.addComponent(
																tablesListComboBox,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																580,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jPanel4,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																580,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(0, 0, 0)
										.addGroup(
												jPanel6Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addGroup(
																jPanel6Layout
																		.createSequentialGroup()
																		.addComponent(
																				jScrollPane2)
																		.addGap(0,
																				0,
																				0))
														.addComponent(
																jPanel3,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																268,
																javax.swing.GroupLayout.PREFERRED_SIZE))));
		jPanel6Layout
				.setVerticalGroup(jPanel6Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel6Layout
										.createSequentialGroup()
										.addGroup(
												jPanel6Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel6Layout
																		.createSequentialGroup()
																		.addComponent(
																				tablesListComboBox,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jPanel4,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(
																jPanel6Layout
																		.createSequentialGroup()
																		.addComponent(
																				jPanel3,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				54,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(0,
																				0,
																				0)
																		.addComponent(
																				jScrollPane2,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				40,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));

		jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

		jPanel5.setLayout(new java.awt.GridLayout(1, 0));

		tableInsertRowButton.setBackground(new java.awt.Color(204, 204, 204));
		tableInsertRowButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableInsertRowButton.setText("insert row");
		tableInsertRowButton
				.setToolTipText("Insert row where currently selected.");
		tableInsertRowButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableInsertRowButtonActionPerformed(evt);
					}
				});
		jPanel5.add(tableInsertRowButton);

		tableAddRowButton.setBackground(new java.awt.Color(204, 204, 204));
		tableAddRowButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableAddRowButton.setText("append row");
		tableAddRowButton.setToolTipText("Add row to end of table.");
		tableAddRowButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableAddRowButtonActionPerformed(evt);
					}
				});
		jPanel5.add(tableAddRowButton);

		tableDeleteRowButton.setBackground(new java.awt.Color(204, 204, 204));
		tableDeleteRowButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableDeleteRowButton.setForeground(new java.awt.Color(204, 0, 0));
		tableDeleteRowButton.setText("delete row(s)");
		tableDeleteRowButton.setToolTipText("Delete selected row(s).");
		tableDeleteRowButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableDeleteRowButtonActionPerformed(evt);
					}
				});
		jPanel5.add(tableDeleteRowButton);

		tableClearEmptyButton.setBackground(new java.awt.Color(204, 204, 204));
		tableClearEmptyButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableClearEmptyButton.setForeground(new java.awt.Color(204, 0, 0));
		tableClearEmptyButton.setText("clear empty");
		tableClearEmptyButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						tableClearEmptyButtonActionPerformed(evt);
					}
				});
		jPanel5.add(tableClearEmptyButton);

		tableClearButton.setBackground(new java.awt.Color(204, 204, 204));
		tableClearButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableClearButton.setForeground(new java.awt.Color(204, 0, 51));
		tableClearButton.setText("clear all");
		tableClearButton.setToolTipText("Clear current table.");
		tableClearButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				tableClearButtonActionPerformed(evt);
			}
		});
		jPanel5.add(tableClearButton);

		tableTestButton.setBackground(new java.awt.Color(204, 204, 204));
		tableTestButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		tableTestButton.setText("test");
		tableTestButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				tableTestButtonActionPerformed(evt);
			}
		});
		jPanel5.add(tableTestButton);

		jPanel7.add(jPanel5);

		tableListTable.setFont(new java.awt.Font("Segoe UI", 0, 12));
		tableListTable
				.setModel(new javax.swing.table.DefaultTableModel(
						new Object[][] {
								{ null, null, "small box", null, null, null },
								{ null, null, "box", null, null, null },
								{ null, null, "large box", null, null, null },
								{ null, null, "small box of rocks", null, null,
										null },
								{ null, null, "box of rocks", null, null, null },
								{ null, null, "large box of rocks", null, null,
										null },
								{ null, null, "small chest", null, null, null },
								{ null, null, "chest", null, null, null },
								{ null, null, "large chest", null, null, null },
								{ null, null, "chest full of rocks", null,
										null, null } }, new String[] {
								"Low Roll", "High Roll", "Reward",
								"Experience", "Gold Value", "refer to table" }) {
					Class[] types = new Class[] { java.lang.Integer.class,
							java.lang.Integer.class, java.lang.String.class,
							java.lang.Integer.class, java.lang.Integer.class,
							java.lang.String.class };

					public Class getColumnClass(int columnIndex) {
						return types[columnIndex];
					}
				});
		tableListTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		tableReferToColumn = tableListTable.getColumnModel().getColumn(
				TABLE_REFERTO);
		tableReferToColumn.setCellEditor(new DefaultCellEditor(
				tableReferToComboBox));
		jScrollPane1.setViewportView(tableListTable);
		// set number columns narrow
		TableColumn col = (TableColumn) tableListTable.getColumnModel()
				.getColumn(TABLE_LOW_DICE);
		col.setPreferredWidth(60);

		col = (TableColumn) tableListTable.getColumnModel().getColumn(
				TABLE_HIGH_DICE);
		col.setPreferredWidth(60);

		// set reward field longer
		col = (TableColumn) tableListTable.getColumnModel().getColumn(
				TABLE_REWARD);
		col.setPreferredWidth(400);
		// meh

		col = (TableColumn) tableListTable.getColumnModel()
				.getColumn(TABLE_EXP);
		col.setPreferredWidth(60);

		col = (TableColumn) tableListTable.getColumnModel().getColumn(
				TABLE_GOLDVALUE);
		col.setPreferredWidth(60);

		col = (TableColumn) tableListTable.getColumnModel().getColumn(
				TABLE_REFERTO);
		col.setPreferredWidth(150);

		tableListTable.getTableHeader().setReorderingAllowed(false);

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout
				.setHorizontalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addComponent(
												jPanel6,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												893,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap())
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												893, Short.MAX_VALUE)
										.addGap(14, 14, 14))
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addComponent(
												jPanel7,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												893, Short.MAX_VALUE)
										.addContainerGap()));
		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addComponent(
												jPanel6,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel7,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(0, 0, 0)
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												286, Short.MAX_VALUE)));

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

		add(jPanel1, java.awt.BorderLayout.CENTER);
	}// </editor-fold>
	//GEN-END:initComponents

	private void tableDeleteRowButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Utils.askToDeleteSelectedRows(tableListTable, tableDeleteRowButton);
	}

	private void tableImportTXTRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		tableImportTextArea.setWrapStyleWord(false);
		tableImportTextArea.setLineWrap(false);

	}

	private void tableImportOSTRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		tableImportTextArea.setWrapStyleWord(true);
		tableImportTextArea.setLineWrap(true);

	}

	private void tableImportPasteFromClipboardButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		String importString = Utils.getClipboardContents(ost.mainFrame);
		if (importString != null) {
			tableImportTextArea.setText(importString);
		}

	}

	private void tableCopyToClipBoardButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		Utils.setClipboardContents(tableExportTextArea.getText());
		SimpleDialog.showDone("Export data in clipboard.");

	}

	private void tableClearEmptyButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		DM_Config_Tab_Charts.clearEmptyLinesFromTable(tableListTable);
	}

	private void tableInsertRowButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		insertRowInTable(tableListTable, false);
	}

	private void tableImportImportButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		TableClass oT = null;
		if (tableImportOSTRadioButton.isSelected()) {
			oT = tableImportOST();
		} else if (tableImportTXTRadioButton.isSelected()) {
			oT = tableImportTXT();
		}

		if (oT != null) {
			DefaultComboBoxModel model = (DefaultComboBoxModel) tablesListComboBox
					.getModel();

			MainClass
					.ddprint(String.format("table-import (%s)\n", oT.getName()));

			ost.tableList.add(oT);
			model.addElement(oT);
			model.setSelectedItem(oT);
			updateAllGeneratorTableListComboBoxes();
			tableImportDialog.setVisible(false);
			tableImportTextArea.setText("");
			SimpleDialog
					.showDone("Table imported, SAVE if you want to keep it.");
		} else {
			SimpleDialog.showError("Import of table failed.");
		}

	}

	/**
	 * import ost exported/xml text
	 * 
	 * @return
	 */
	private TableClass tableImportOST() {
		//TODO use new import methods.
		TableList aList = new TableList(null);
		aList.xm.deserializeFromXML(tableImportTextArea.getText());
		TableClass oTmp = aList.getContent().get(0);
		if (oTmp != null) {
		TableClass oSearch = 
				TableClass.findTableClass(
						oTmp.getName(), ost.tableList.getContent());
		if (oSearch == null
				|| SimpleDialog.AskYN(tableImportButton, String.format(
						"Table %s already exists, save anyway?",
						oSearch.getName()))) {
			return (oTmp);
		}
		}
		return (oTmp);
	}

	/**
	 * import a "text" style chart from the text area
	 * and create a table with it
	 * 
	 * @return
	 */
	private TableClass tableImportTXT() {
		TableClass oC = new TableClass("IMPORT-TABLE", "IMPORT-DESC", "OTHER");
		String parseText = tableImportTextArea.getText();
		String parseLineRegex = "(.+)\n";
		String parseValuesRegex = "[ \\S]+";
		// - and + are considered barriers so can't use \\b for front and keep -2 numbers.
		String parseRegex = "(\\A|\\t)?(" + parseValuesRegex + ")(\\t+|\\b)";

		Pattern checkLinePattern = Pattern.compile(parseLineRegex,
				Pattern.CASE_INSENSITIVE);
		Pattern checkPattern = Pattern.compile(parseRegex,
				Pattern.CASE_INSENSITIVE);

		Matcher checkLineMatcher = checkLinePattern.matcher(parseText);

		String thisLine;
		Matcher checkMatcher;
		int rCount = 0;
		int nLastDice = 0;
		// flip through each line
		while (checkLineMatcher.find()) {
			int colCount = 0;
			thisLine = checkLineMatcher.group();
			ost.dprint("tableImportTXT()-line-(" + Pattern.quote(thisLine)
					+ ")---\n");
			checkMatcher = checkPattern.matcher(thisLine);
			TreasureTableClass eT = new TreasureTableClass("IMPORT", "IMPORT",
					0, 1, 0, -1);
			oC.getTreasureEntry().add(eT);
			//ost.dprint("creating new treasure class\n");
			while (checkMatcher.find()) {
				boolean bTrySomethingElse = false;
				//				ost.dprint("importButtonTXT()-parseLine-("
				//						+ Pattern.quote(checkMatcher.group().trim()) + ")---\n");
				if (checkMatcher.group(2) == null) {
					SimpleDialog
							.showError("Error processing data, strange characters or invalid format.");
					return (null);
				}
				String sG1 = checkMatcher.group(2).trim();
				//				ost.dprint(String.format(
				//						"tableImportTXT() row[%d] col[%d]=(%s)\n", rCount,
				//						colCount, sG1));
				// numbers \d+ or \d+-\d+
				if (colCount == 0) {
					String sG1Clean = sG1.replaceAll("\\s", "");
					Matcher diceMatch = Pattern.compile(
							"\\D?((\\d+)(\\-(\\d+))?)").matcher(sG1Clean);
					if (diceMatch.matches()) {
						if (diceMatch.group(2) != null
								&& diceMatch.group(4) != null) {
							// \d+-\d+
							String slowDice = diceMatch.group(2).trim();
							String shighDice = diceMatch.group(4).trim();
							int nlowDice = 0;
							int nhighDice = 0;
							if (MyParse.isInteger(slowDice))
								nlowDice = Integer.parseInt(slowDice);
							else {
								SimpleDialog.showError(String.format(
										"Invalid low dice on row %d",
										rCount + 1));
								return (null);
							}
							if (MyParse.isInteger(shighDice))
								nhighDice = Integer.parseInt(shighDice);
							else {
								SimpleDialog.showError(String.format(
										"Invalid high dice on row %d",
										rCount + 1));
								return (null);
							}
							//							ost.dprint(String.format("set low %d, high %d\n",
							//									nlowDice, nhighDice));
							nLastDice = nhighDice;
							eT.setLowDice(nlowDice);
							eT.setHighDice(nhighDice);
						} else if (diceMatch.group(2) != null
								&& diceMatch.group(4) == null) {
							// \d+
							String slowDice = diceMatch.group(2).trim();
							int nlowDice = 0;
							if (MyParse.isInteger(slowDice))
								nlowDice = Integer.parseInt(slowDice);
							else {
								SimpleDialog.showError(String.format(
										"Invalid dice on row %d", rCount + 1));
								return (null);
							}
							//							ost.dprint(String.format("set dice %d\n", nlowDice));
							nLastDice = nlowDice;
							eT.setLowDice(nlowDice);
							eT.setHighDice(nlowDice);
						} // end \\d+
					} else { // end dice matches
						nLastDice++;
						eT.setLowDice(nLastDice);
						eT.setHighDice(nLastDice);
						//SimpleDialog.showError("Invalid dice formatting ["+ sG1 + "]");
						ost.dprint("Invalid dice formatting [" + sG1 + "]\n");
						bTrySomethingElse = true;
					}
				}
				// reward name \\S+
				else if (colCount == 1) {
					//					ost.dprint(String.format("set reward to %s\n", sG1));
					eT.setName(sG1);
					eT.setDescription(sG1);
					int nFound = MyParse.findGPValuesInText(sG1);
					if (nFound > 0)
						eT.setGoldvalue(nFound);
				}
				// exp reward? \\d+
				else if (colCount == 2) {
					Matcher numberMatch = Pattern.compile("(\\d+)")
							.matcher(sG1);
					if (numberMatch.matches()) {
						String snumber = numberMatch.group(1).trim();
						int nNumber = 0;
						if (MyParse.isInteger(snumber))
							nNumber = Integer.parseInt(snumber);
						else {
							SimpleDialog.showError(String.format(
									"Invalid EXP value on row %d", rCount + 1));
							return (null);
						}
						ost.dprint(String.format("set EXP to %d\n", nNumber));
						eT.setExp(nNumber);
					} // end number match
				}
				// gold value? \\d+
				else if (colCount == 3) {
					Matcher numberMatch = Pattern.compile("(\\d+)")
							.matcher(sG1);
					if (numberMatch.matches()) {
						String snumber = numberMatch.group(1).trim();
						int nNumber = 0;
						if (MyParse.isInteger(snumber))
							nNumber = Integer.parseInt(snumber);
						else {
							SimpleDialog
									.showError(String.format(
											"Invalid GOLD value on row %d",
											rCount + 1));
							return (null);
						}
						ost.dprint(String.format("set GOLD to %d\n", nNumber));
						eT.setGoldvalue(nNumber);
					} // end number match
				} else {

				}
				// if col == 0 failed to match it's probably a single
				// column of text so we're adding it as name
				if (colCount == 0 && bTrySomethingElse
				// && !Pattern.compile("(\\d+).*").matcher(sG1).matches()
				) {
					bTrySomethingElse = false;
					eT.setName(sG1);
					eT.setDescription(sG1);
					// if GP value listed in "reward" lets set that.
					// it will be over-written if they specify in another
					// parameter
					// look for XX gp or XXgp
					int nFound = MyParse.findGPValuesInText(sG1);
					if (nFound > 0)
						eT.setGoldvalue(nFound);
					ost.dprint(String.format("row=%d, col=%d, set NAME to [%s]\n", 
							rCount,colCount,sG1));
				} // colCount 0
				colCount++;
			} // end find of checkPattern
			rCount++;
		} // end checkLineMatcher find()
		return (oC);
	}

	private void tableImportDoneButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		tableImportDialog.setVisible(false);
	}

	private void tableExportDoneButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		tableExportDialog.setVisible(false);
	}

	private void tableImportButtonActionPerformed(java.awt.event.ActionEvent evt) {
		tableImportDialog.setLocation(tableImportButton.getLocation());
		tableImportDialog.setVisible(true);
	}

	private void tableExportButtonActionPerformed(java.awt.event.ActionEvent evt) {
		//TODO fix to work with new xml
		TableClass oT = new TableClass();
		oT = getCurrentTable(oT);
		TableList aList = new TableList(null);
		aList.getContent().add(oT);
		tableExportTextArea.setText(aList.xm.serializeToXML());
		tableExportDialog.setLocation(tableExportButton.getLocation());
		tableExportDialog.setVisible(true);
	}

	private void tableTestButtonActionPerformed(java.awt.event.ActionEvent evt) {
		TableClass oT = new TableClass();
		oT = getCurrentTable(oT);
		MyRandomClass oR = new MyRandomClass(1, oT.getHighestRoll());
		//		String myReward = oT.getReward(ost.tableList, oR.rollRandomDice());
		//		TableRewardClass oReward = oT.getReward(ost.tableList, oR.rollRandomDice());
		//		ArrayList<TableRewardClass> oRewards = oT.getAllRewards(ost.tableList, 
		//				oR.rollRandomDice(), null, false);
		oT.getAllRewards(ost.rewardList, ost.tableList.getContent(), oR.rollRandomDice(),
				null, false);
		SimpleDialog.showDone(String.format("Your reward is [%s]",
				TableRewardClass.getRewardOutput(ost.rewardList)));
	}

	private void tableClearButtonActionPerformed(java.awt.event.ActionEvent evt) {
		if (SimpleDialog.AskYN(this,
				"Are you sure you want to clear all the rows from this table?")) {
			clearCurrentTable();
		}
	}

	public void updateAllGeneratorTableListComboBoxes() {
		Collections.sort(ost.tableList.getContent());
		for (Table_Generator tG : ost.generatorList) {
			DefaultComboBoxModel model = (DefaultComboBoxModel) tG.tableSelectComboBox
					.getModel();
			model.removeAllElements();
			for (TableClass oT : ost.tableList.getContent()) {
				if (tG.myType.equalsIgnoreCase(oT.getType())
						|| oT.getType().equalsIgnoreCase("ALL")) {
					model.addElement(oT);
				} // end if tG.mytype
				else {
					//					ost.dprint("updateAllGeneratorTableListComboBoxes("
					//							+ tG.myType + ") !equal " + oT.getType() + "\n");
				}

			} // end for

			//tG.tableSelectComboBox.setSelectedIndex(0);
		} // end for

		// now the referto box used in the table editor cells
		DefaultComboBoxModel modelRef = (DefaultComboBoxModel) tableReferToComboBox
				.getModel();
		modelRef.removeAllElements();
		for (TableClass oT : ost.tableList.getContent())
			modelRef.addElement(oT);
		//tableReferToComboBox.setSelectedIndex(0);

	}// end updateAllTableListComboBoxes

	private void tableDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {
		TableClass oT = (TableClass) tablesListComboBox.getSelectedItem();
		if (SimpleDialog.AskYN(this,
				"Are you sure you want to delete " + oT.getName())) {
			DefaultComboBoxModel model = (DefaultComboBoxModel) tablesListComboBox
					.getModel();

			ost.tableList.getContent().remove(oT);
			model.removeElement(oT);

			updateAllGeneratorTableListComboBoxes();

			tablesListComboBox.setSelectedIndex(0);
		}
	}

	private void tableNewButtonActionPerformed(java.awt.event.ActionEvent evt) {
		TableClass oT = new TableClass("New Table", "New table description.",
				"ALL");
		DefaultComboBoxModel model = (DefaultComboBoxModel) tablesListComboBox
				.getModel();
		ost.tableList.add(oT);
		model.addElement(oT);

		updateAllGeneratorTableListComboBoxes();

		tablesListComboBox
				.setSelectedIndex(tablesListComboBox.getItemCount() - 1);
	}

	private void tableAddRowButtonActionPerformed(java.awt.event.ActionEvent evt) {
		insertRowInTable(tableListTable, true);
	}

	/**
	 * insert or append row for Tables
	 * 
	 * @param table
	 * @param append
	 */
	private void insertRowInTable(JTable table, boolean append) {
		int currentHighDice = 0;
		int iExp = 0;
		int iGold = 0;
		if (table.getRowCount() > 0) {
			currentHighDice = Integer.parseInt(table
					.getValueAt(table.getRowCount() - 1, TABLE_HIGH_DICE)
					.toString().trim());
			iExp = Integer.parseInt(table
					.getValueAt(table.getRowCount() - 1, TABLE_EXP).toString()
					.trim());
			iGold = Integer.parseInt(table
					.getValueAt(table.getRowCount() - 1, TABLE_GOLDVALUE)
					.toString().trim());
		}

		DefaultTableModel model = (DefaultTableModel) table.getModel();
		int iLow = currentHighDice + 1;
		int iHigh = currentHighDice + 10;
		int insertRowAt = table.getSelectedRow();
		if (insertRowAt < 0 || append)
			insertRowAt = table.getRowCount();
		model.insertRow(insertRowAt, new Object[] { iLow, iHigh, "", iExp,
				iGold, null });
	}

	private void tableSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {
		currentTable = getCurrentTable(currentTable);
		updateAllGeneratorTableListComboBoxes();
//		Document doc = TableClass.xmlBuildDocFromList(ost.tableList,
//				"TableList");
//		XMLControl.saveDoc(doc, ost.sTableFile);
		ost.tableList.xm.serializeToXMLFile();
		SimpleDialog.showDone("Saved tables to file.");
	}

	private void tablesListComboBoxActionPerformed(
			java.awt.event.ActionEvent evt) {
		currentTable = (TableClass) tablesListComboBox.getSelectedItem();
		updateCurrentTable(currentTable);
	}

	/**
	 * return model for tablelist combobox
	 * 
	 * @return
	 */
	DefaultComboBoxModel getTableListForComboBox() {
		DefaultComboBoxModel model = new DefaultComboBoxModel();
		//		Collections.sort(ost.tableList, new TableSortByName());
		Collections.sort(ost.tableList.getContent());
		for (TableClass oT : ost.tableList.getContent())
			model.addElement(oT);
		currentTable = (TableClass) tablesListComboBox.getSelectedItem();
		return (model);
	}

	/**
	 * 
	 * @return
	 */
	DefaultComboBoxModel getTableListReferToForComboBox() {
		DefaultComboBoxModel model = new DefaultComboBoxModel();
		model.addElement(new TableClass("NONE", "EMPTY", "ALL")); // so we have a "none" line
		//		Collections.sort(ost.tableList, new TableSortByName());
		Collections.sort(ost.tableList.getContent());

		for (TableClass oT : ost.tableList.getContent())
			model.addElement(oT);
		currentTable = (TableClass) tablesListComboBox.getSelectedItem();
		return (model);
	}

	/**
	 * flush the current table.
	 */
	void clearCurrentTable() {
		DefaultTableModel model = (DefaultTableModel) tableListTable.getModel();
		for (int i = tableListTable.getRowCount(); i > 0; i--) {
			model.removeRow(i - 1);
		} // end for
		tableListTable.removeAll();
	}

	/**
	 * set the table to oT values
	 * 
	 * @param oT
	 */
	void updateCurrentTable(TableClass oT) {
		DefaultTableModel model = (DefaultTableModel) tableListTable.getModel();

		// do this incase they still have the cell selected when they
		// use drop down to change tables, if not it will copy the cell
		// they are on to the other table
		if (tableListTable.getCellEditor() != null)
			tableListTable.getCellEditor().stopCellEditing();
		//---

		clearCurrentTable();

		tableNameTextField.setText(oT.getName());
		tableDescTextField.setText(oT.getDescription());
		tableTypeTextField.setText(oT.getType());
		Collections.sort(oT.getTreasureEntry());
		for (TreasureTableClass oTT : oT.getTreasureEntry()) {
			model.addRow(new Object[] { oTT.getLowDice(), oTT.getHighDice(),
					oTT.getName(), oTT.getExp(), oTT.getGoldvalue(),
					oTT.getReferToTable() });
		}
	}// end updateCurrentTable

	/**
	 * get the values of the current Table
	 * @param oT
	 * @return
	 */
	TableClass getCurrentTable(TableClass oT) {
		if (oT == null)
			oT = new TableClass();

		oT.setName(tableNameTextField.getText());
		oT.setDescription(tableDescTextField.getText());
		oT.setType(tableTypeTextField.getText().trim().toUpperCase());
		oT.getTreasureEntry().clear();
		for (int i = 0; i < tableListTable.getRowCount(); i++) {
			TreasureTableClass oTT = new TreasureTableClass();
			// if no blank entries save...
			if (tableListTable.getValueAt(i, TABLE_LOW_DICE) != null
					&& tableListTable.getValueAt(i, TABLE_HIGH_DICE) != null
					&& tableListTable.getValueAt(i, TABLE_REWARD) != null
					&& tableListTable.getValueAt(i, TABLE_EXP) != null
					&& tableListTable.getValueAt(i, TABLE_GOLDVALUE) != null) {
				oTT.setLowDice(Integer.parseInt(tableListTable
						.getValueAt(i, TABLE_LOW_DICE).toString().trim()));

				oTT.setHighDice(Integer.parseInt(tableListTable
						.getValueAt(i, TABLE_HIGH_DICE).toString().trim()));

				oTT.setName(tableListTable.getValueAt(i, TABLE_REWARD)
						.toString().trim());

				oTT.setExp(Integer.parseInt(tableListTable
						.getValueAt(i, TABLE_EXP).toString().trim()));

				oTT.setGoldvalue(Integer.parseInt(tableListTable
						.getValueAt(i, TABLE_GOLDVALUE).toString().trim()));

				// this can be null
				if (tableListTable.getValueAt(i, TABLE_REFERTO) != null)
					oTT.setReferToTable(tableListTable
							.getValueAt(i, TABLE_REFERTO).toString().trim());

				oT.getTreasureEntry().add(oTT);
			} // end if !null

			//				ost.dprint(String.format("Added %d-%d with %s\n", oTT
			//						.getLowDice(), oTT.getHighDice(), oTT.getName()));			
		} // end for
		return (oT);
	} // end getCurrentTable

	//	/**
	//	 * sort TableClass by name
	//	 * 
	//	 * @author Celestian
	//	 *
	//	 */
	//	public class TableSortByName implements Comparator<TableClass> {
	//		public int compare(TableClass o1, TableClass o2) {
	//			return o1.name.toUpperCase().compareTo((o2).name.toUpperCase());
	//		}
	//	}

	public void addTableToDMScreen(DM_Screen dmScreen,
			Table_Generator tablePanel, boolean showScreen) {
		JTabbedPane tabParentPane = dmScreen.dmScreenTablesTabbedPane;
		JTabbedPane tabPane = null;

		int tabCount = tabParentPane.getTabCount();
		for (int i = 0; i < tabCount; i++) {
			if (tabParentPane.getTitleAt(i).equalsIgnoreCase(tablePanel.myType)) {
				tabPane = (JTabbedPane) tabParentPane.getComponentAt(i);
				break;
			}
		}
		// if the tab for this type doesn't exist yet then
		// we add it, otherwise skip it
		if (tabPane == null) {
			tabParentPane.addTab(tablePanel.myType, null, tablePanel,
					tablePanel.myType);
		}

		if (!dmScreen.isVisible() && showScreen)
			dmScreen.setVisible(true);
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel10;
	private javax.swing.JPanel jPanel11;
	private javax.swing.JPanel jPanel12;
	private javax.swing.JPanel jPanel13;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanel8;
	private javax.swing.JPanel jPanel9;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JButton tableAddRowButton;
	private javax.swing.JButton tableClearButton;
	private javax.swing.JButton tableClearEmptyButton;
	private javax.swing.JButton tableCopyToClipBoardButton;
	private javax.swing.JButton tableDeleteButton;
	private javax.swing.JButton tableDeleteRowButton;
	private javax.swing.JTextField tableDescTextField;
	private javax.swing.JButton tableExportButton;
	private javax.swing.JDialog tableExportDialog;
	private javax.swing.JButton tableExportDoneButton;
	private javax.swing.JTextArea tableExportTextArea;
	private javax.swing.JButton tableImportButton;
	private javax.swing.JDialog tableImportDialog;
	private javax.swing.JButton tableImportDoneButton;
	private javax.swing.JButton tableImportImportButton;
	private javax.swing.JRadioButton tableImportOSTRadioButton;
	private javax.swing.JButton tableImportPasteFromClipboardButton;
	private javax.swing.JRadioButton tableImportTXTRadioButton;
	private javax.swing.JTextArea tableImportTextArea;
	private javax.swing.ButtonGroup tableImportbuttonGroup;
	private javax.swing.JButton tableInsertRowButton;
	private javax.swing.JTable tableListTable;
	private javax.swing.JTextField tableNameTextField;
	private javax.swing.JButton tableNewButton;
	private javax.swing.JComboBox tableReferToComboBox;
	private javax.swing.JButton tableSaveButton;
	private javax.swing.JButton tableTestButton;
	private javax.swing.JTextField tableTypeTextField;
	private javax.swing.JComboBox tablesListComboBox;
	// End of variables declaration//GEN-END:variables

	static private int TABLE_LOW_DICE = 0;
	static private int TABLE_HIGH_DICE = 1;
	static private int TABLE_NAME = 2;
	static private int TABLE_REWARD = 2; // Intentionally the same as TABLE_NAME
	static private int TABLE_EXP = 3;
	static private int TABLE_GOLDVALUE = 4;
	static private int TABLE_REFERTO = 5;
	public MainClass ost;
	private TableClass currentTable;
	private NumberFormatter numberFormat;
	private TableColumn tableReferToColumn;

} // end DM_Config_Tab_Table
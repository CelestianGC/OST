/*
 * Panel_Player_Skills.java
 *
 * Created on __DATE__, __TIME__
 */

package org.ost.main;

import static org.ost.main.MyClasses.MyStatics.ABILITY_CHARISMA;
import static org.ost.main.MyClasses.MyStatics.ABILITY_COMELINESS;
import static org.ost.main.MyClasses.MyStatics.ABILITY_CONSTITUTION;
import static org.ost.main.MyClasses.MyStatics.ABILITY_DEXTERITY;
import static org.ost.main.MyClasses.MyStatics.ABILITY_INTELLIGENCE;
import static org.ost.main.MyClasses.MyStatics.ABILITY_STRENGTH;
import static org.ost.main.MyClasses.MyStatics.ABILITY_WISDOM;
import static org.ost.main.MyClasses.MyStatics.AC_NAMES;
import static org.ost.main.MyClasses.MyStatics.AC_NORMAL;
import static org.ost.main.MyClasses.MyStatics.AC_REAR;
import static org.ost.main.MyClasses.MyStatics.AC_SHIELDLESS;
import static org.ost.main.MyClasses.MyStatics.ALIGNMENTS;
import static org.ost.main.MyClasses.MyStatics.DEFAULT_FONT;
import static org.ost.main.MyClasses.MyStatics.MAX_CLERIC_SPELL_LEVEL;
import static org.ost.main.MyClasses.MyStatics.MAX_MAGE_SPELL_LEVEL;
import static org.ost.main.MyClasses.MyStatics.SAVES;
import static org.ost.main.MyClasses.MyStatics.SAVE_BREATH;
import static org.ost.main.MyClasses.MyStatics.SAVE_DEATH;
import static org.ost.main.MyClasses.MyStatics.SAVE_POLY;
import static org.ost.main.MyClasses.MyStatics.SAVE_ROD;
import static org.ost.main.MyClasses.MyStatics.SAVE_SPELL;
import static org.ost.main.MyClasses.MyStatics.STRENGTH_PERCENT_100;
import static org.ost.main.MyClasses.MyStatics.STRENGTH_PERCENT_1_50;
import static org.ost.main.MyClasses.MyStatics.STRENGTH_PERCENT_51_75;
import static org.ost.main.MyClasses.MyStatics.STRENGTH_PERCENT_76_90;
import static org.ost.main.MyClasses.MyStatics.STRENGTH_PERCENT_91_99;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.ArrayList;

import javax.swing.JLabel;
import javax.swing.JPanel;

import org.ost.main.MyClasses.AbilityScoreClass;
import org.ost.main.MyClasses.AbilityStatClass;
import org.ost.main.MyClasses.CharacterClass;
import org.ost.main.MyClasses.ExtraAbilitiesClass;
import org.ost.main.MyClasses.PlayerClass;
import org.ost.main.MyClasses.RaceClass;
import org.ost.main.MyClasses.SkillsClass;
import org.ost.main.MyClasses.PlayerClass.PCClass;

/**
 *
 * @author  __USER__
 */
public class Panel_Player_Features extends javax.swing.JPanel {
	private MainClass ost;
	private PlayerClass pc;

	/** Creates new form Panel_Player_Skills */
	public Panel_Player_Features(MainClass ost, PlayerClass oPlayer) {
		this.ost = ost;
		this.pc = oPlayer;
		initComponents();
		updatePanel(oPlayer);
	}

	public void updatePanel(PlayerClass oPlayer) {
		// added this incase we updated panel
		pc = oPlayer;
		featuresTextArea.removeAll();

		// class based
		ArrayList<ExtraAbilitiesClass> abilitiesClass = ExtraAbilitiesClass
				.getClassExtraAbilities(pc, ost);

		String text = "* Class: ";
		featuresTextArea.append(text);
		for(PCClass cC: pc.getMyClass()) {
			CharacterClass oC = cC.getClassByID(ost.characterClassList);
			if (oC != null) {
				featuresTextArea.append(oC.getDescription());
				if (pc.getMyClass().get(pc.getMyClass().size() - 1) != cC)//not last object
					text = ", ";
				else if (abilitiesClass.size() > 0) // has abilities to add
					text = ", ";
				else text = "\n"; // nothing else
				featuresTextArea.append(text);
			}
		}
		if (abilitiesClass.size() > 0) {
			for (ExtraAbilitiesClass oE : abilitiesClass) {
				text = String.format("%s", oE.getDescription());
				if (abilitiesClass.get(abilitiesClass.size() - 1) != oE)//not last object
					text += ", ";
				else
					text += "\n";
				JLabel desc = new JLabel(text);
				desc.setToolTipText(oE.getName());
				featuresTextArea.append(text);
			}
		} else {
//			featuresTextArea.append("None\n");
			featuresTextArea.append("\n");
		}

		// race based
		RaceClass myRace = RaceClass.getRaceFromMyID(pc.getMyRace().getRaceID(), ost.raceList);
		
		ArrayList<ExtraAbilitiesClass> abilitiesRace = ExtraAbilitiesClass
				.getRaceExtraAbilities(pc, ost);
		text = "* Race: ";
		if (myRace != null) {
			featuresTextArea.append(text);
			if (myRace.getDescription().length() > 0)
				featuresTextArea.append(myRace.getDescription()+
						(abilitiesRace.size()>0?", ":""));
			if (abilitiesRace.size() > 0) {
				for (ExtraAbilitiesClass oE : abilitiesRace) {
					text = String.format("%s", oE.getDescription());
					if (abilitiesRace.get(abilitiesRace.size() - 1) != oE)//not last object
						text += ", ";
					featuresTextArea.append(text);
				}
			} else {
				if (myRace.getDescription().length() <= 0) 
					featuresTextArea.append("None\n");
			}
		}
		
		featuresTextArea.revalidate();
		featuresPanel.revalidate();
		repaint();

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		featuresPanel = new javax.swing.JPanel();
		featuresTextArea = new javax.swing.JTextArea();

		setLayout(new java.awt.BorderLayout());

		featuresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),
						1, true), "Features"));
		featuresPanel.setLayout(new java.awt.BorderLayout());

		featuresTextArea.setBackground(new java.awt.Color(240, 240, 240));
		featuresTextArea.setColumns(20);
		featuresTextArea.setEditable(false);
		featuresTextArea.setFont(new java.awt.Font("Segoe UI", 0, 12));
		featuresTextArea.setLineWrap(true);
		featuresTextArea.setRows(5);
		featuresTextArea.setWrapStyleWord(true);
		featuresPanel.add(featuresTextArea, java.awt.BorderLayout.CENTER);

		add(featuresPanel, java.awt.BorderLayout.CENTER);
	}// </editor-fold>
	//GEN-END:initComponents

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JPanel featuresPanel;
	private javax.swing.JTextArea featuresTextArea;
	// End of variables declaration//GEN-END:variables

}
/*
 * DM_Config_Tab_TreasureChest.java
 *
 * Created on __DATE__, __TIME__
 */

package org.ost.main;

import java.awt.Color;
import java.util.ArrayList;

import javax.swing.SpinnerNumberModel;

import org.ost.main.MyClasses.TableClass;
import org.ost.main.MyClasses.TableRewardClass;
import org.ost.main.MyUtils.MyRandomClass;
import org.ost.main.MyUtils.SimpleDialog;

/**
 * 
 * @author Celestian
 *
 */
public class DM_Config_Tab_TreasureChest extends javax.swing.JPanel {

	/** Creates new form DM_Config_Tab_TreasureChest */
	public DM_Config_Tab_TreasureChest(MainClass ost) {
		this.ost = ost;
		initComponents();
		int colorchange = 0;
		int coloralt = 0;
		for (char ch = 'A'; ch <= 'Z'; ch++) {
			TreasureTypePanel tP = new TreasureTypePanel(ch);
			tP.typeLabel.setText(String.format("%c", tP.myType));
			if (colorchange >= 4 && coloralt < 4) {
				tP.setBackground(new Color(153, 153, 153));
				tP.typeCheckBox.setBackground(tP.getBackground());
				coloralt++;
			} else if (colorchange >= 4 && coloralt >= 4) {
				colorchange = 0;
				coloralt = 0;
			}

			ost.treasureTypeList.add(tP);
			typeListPanel.add(tP);
			colorchange++;
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		mainTabbedPane = new javax.swing.JTabbedPane();
		generatorPanel = new javax.swing.JPanel();
		treasureTypePanel = new javax.swing.JPanel();
		typeListPanel = new javax.swing.JPanel();
		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		generateButton = new javax.swing.JButton();
		typeAppendCheckBox = new javax.swing.JCheckBox();
		resetTypesButton = new javax.swing.JButton();
		clearTypeLogButton = new javax.swing.JButton();
		jPanel3 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		typeTextArea = new javax.swing.JTextArea();

		generatorPanel.setLayout(new java.awt.BorderLayout());
		mainTabbedPane.addTab("Treasure", generatorPanel);
		tableGen = new Table_Generator(ost, "Treasure");
		generatorPanel.add(tableGen);

		treasureTypePanel.setBackground(new java.awt.Color(204, 204, 204));
		treasureTypePanel.setBorder(javax.swing.BorderFactory
				.createTitledBorder(new javax.swing.border.LineBorder(
						new java.awt.Color(0, 0, 0), 3, true), "Treasure"));

		typeListPanel.setBackground(new java.awt.Color(204, 204, 204));
		typeListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),
						1, true), "Types"));
		typeListPanel.setLayout(new java.awt.GridLayout(0, 4));

		jPanel1.setBackground(new java.awt.Color(204, 204, 204));
		jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

		jPanel2.setBackground(new java.awt.Color(204, 204, 204));
		jPanel2.setLayout(new java.awt.GridLayout());

		generateButton.setBackground(new java.awt.Color(204, 204, 204));
		generateButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		generateButton.setText("generate");
		generateButton.setToolTipText("Generate hoard using current settings.");
		generateButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				generateButtonActionPerformed(evt);
			}
		});
		jPanel2.add(generateButton);

		typeAppendCheckBox.setBackground(new java.awt.Color(204, 204, 204));
		typeAppendCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 10));
		typeAppendCheckBox.setSelected(true);
		typeAppendCheckBox.setText("append");
		typeAppendCheckBox
				.setToolTipText("List generated treasure continuously.");
		jPanel2.add(typeAppendCheckBox);

		resetTypesButton.setBackground(new java.awt.Color(204, 204, 204));
		resetTypesButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		resetTypesButton.setText("reset");
		resetTypesButton.setToolTipText("Reset treasure types to default.");
		resetTypesButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				resetTypesButtonActionPerformed(evt);
			}
		});
		jPanel2.add(resetTypesButton);

		clearTypeLogButton.setBackground(new java.awt.Color(204, 204, 204));
		clearTypeLogButton.setFont(new java.awt.Font("Segoe UI", 0, 10));
		clearTypeLogButton.setText("clear");
		clearTypeLogButton
				.setToolTipText("Clear the log below of all treasure.");
		clearTypeLogButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						clearTypeLogButtonActionPerformed(evt);
					}
				});
		jPanel2.add(clearTypeLogButton);

		jPanel1.add(jPanel2);

		jPanel3.setLayout(new java.awt.BorderLayout());

		jScrollPane1.setBackground(new java.awt.Color(204, 204, 204));
		jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(
				new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),
						1, true), "Hoard Generated"));

		typeTextArea.setBackground(new java.awt.Color(204, 204, 204));
		typeTextArea.setColumns(20);
		typeTextArea.setEditable(false);
		typeTextArea.setLineWrap(true);
		typeTextArea.setRows(5);
		typeTextArea.setWrapStyleWord(true);
		jScrollPane1.setViewportView(typeTextArea);

		jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

		javax.swing.GroupLayout treasureTypePanelLayout = new javax.swing.GroupLayout(
				treasureTypePanel);
		treasureTypePanel.setLayout(treasureTypePanelLayout);
		treasureTypePanelLayout
				.setHorizontalGroup(treasureTypePanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								treasureTypePanelLayout
										.createSequentialGroup()
										.addGroup(
												treasureTypePanelLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																typeListPanel,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																403,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jPanel1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																588,
																Short.MAX_VALUE)
														.addGroup(
																treasureTypePanelLayout
																		.createSequentialGroup()
																		.addComponent(
																				jPanel3,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				403,
																				Short.MAX_VALUE)
																		.addGap(
																				185,
																				185,
																				185)))
										.addContainerGap()));
		treasureTypePanelLayout
				.setVerticalGroup(treasureTypePanelLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								treasureTypePanelLayout
										.createSequentialGroup()
										.addComponent(
												typeListPanel,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												198,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jPanel3,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												252, Short.MAX_VALUE)
										.addContainerGap()));

		mainTabbedPane.addTab("Treasure by Type", treasureTypePanel);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				mainTabbedPane));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 590,
				Short.MAX_VALUE));

		mainTabbedPane.setToolTipTextAt(0, "Generate random treasure horde!");
		mainTabbedPane.setToolTipTextAt(1, "Generate treasure by type.");
	}// </editor-fold>
	//GEN-END:initComponents

	private void generateLootByTableName(String tableName, String exclude[]) {
		//String sReward = "tt-null";
//		ArrayList<TableRewardClass> oRewards = null;
		TableClass oT = null;
		oT = TableClass.findTableClass(tableName, ost.tableList.getContent());
		if (oT != null) {
			ost.dprint(String.format("---generateLootByTableName(%s)\n",
					tableName));
			MyRandomClass oR = new MyRandomClass(1, oT.getHighestRoll());
//			sReward = oT.getReward(ost.tableList, oR.rollRandomDice(), exclude,false);
//			oReward = oT.getReward(ost.tableList, oR.rollRandomDice(), exclude,false);
			oT.getAllRewards(ost.rewardList, ost.tableList.getContent(), oR.rollRandomDice(), exclude, false);
		} else {
			SimpleDialog.showError(String.format(
					"Error in generateLootByTableName(), "
							+ "null result on table (%s)", tableName));
		}

		//return (oRewards == null?"tt-null":TableRewardClass.getRewardOutput(oRewards));
	}

	/**
	 * 
	 * @param percent
	 * @param count
	 * @param tableName
	 * @return
	 */
	private void generateLootCheck(int percent, int count, String tableName,
			String exclude[]) {
		if (MyRandomClass.getPercent() <= percent) {
			for (int i = 0; i < count; i++) {
				generateLootByTableName(tableName, exclude);
			}
		}
	}

	private int getCP(int percent, int diceCount, int diceFaces) {
		return (MyRandomClass.getPercent() <= percent ? MyRandomClass.rollDice(
				diceCount, diceFaces) : 0);
	}

	private int getSP(int percent, int diceCount, int diceFaces) {
		return (MyRandomClass.getPercent() <= percent ? MyRandomClass.rollDice(
				diceCount, diceFaces) : 0);
	}

	private int getEP(int percent, int diceCount, int diceFaces) {
		return (MyRandomClass.getPercent() <= percent ? MyRandomClass.rollDice(
				diceCount, diceFaces) : 0);
	}

	private int getGP(int percent, int diceCount, int diceFaces) {
		return (MyRandomClass.getPercent() <= percent ? MyRandomClass.rollDice(
				diceCount, diceFaces) : 0);
	}

	private int getPP(int percent, int diceCount, int diceFaces) {
		return (MyRandomClass.getPercent() <= percent ? MyRandomClass.rollDice(
				diceCount, diceFaces) : 0);
	}

	private int getGem(int percent, int diceCount, int diceFaces) {
		return (MyRandomClass.getPercent() <= percent ? MyRandomClass.rollDice(
				diceCount, diceFaces) : 0);
	}

	private int getJewelry(int percent, int diceCount, int diceFaces) {
		return (MyRandomClass.getPercent() <= percent ? MyRandomClass.rollDice(
				diceCount, diceFaces) : 0);
	}
	private TableRewardClass makeCoinItem(String sType, int iCount) {
		TableRewardClass oR = new TableRewardClass(sType);
		oR.setName(String.format("%d %s",iCount,sType));
		oR.setGoldValue(0);
		oR.setExpValue(0);
		return(oR);
	}
	private void generateTreasureTypeLoot(char tType, int tCount) {
		//TableClass oT = null;
		MyReward myReward = new MyReward("");

		for (int i = 0; i < tCount; i++) {
			switch (tType) {
			case 'A': {
				myReward.cp += getCP(25, 1, 6) * 1000;
				myReward.sp += getSP(30, 1, 6) * 1000;
				myReward.ep += getEP(35, 1, 6) * 1000;
				myReward.gp += getGP(40, 1, 10) * 1000;
				myReward.pp += getPP(25, 1, 4) * 100;
				myReward.gem += getGem(60, 4, 10); // TODO make tables for gems and jewelry
				myReward.jewelry += getJewelry(50, 3, 10);

//				myReward.appendMyReward(generateLootCheck(30, 3,
//						"2. Magic Item Table", null));
				generateLootCheck(30, 3,"2. Magic Item Table", null);

			}
				break;

			case 'B': {
				myReward.cp += getCP(50, 1, 8) * 1000;
				myReward.sp += getSP(25, 1, 6) * 1000;
				myReward.ep += getEP(25, 1, 4) * 1000;
				myReward.gp += getGP(25, 1, 3) * 1000;
				//myReward.pp += getPP(25,1,4)*100;
				myReward.gem += getGem(30, 1, 8);
				myReward.jewelry += getJewelry(20, 1, 4);

				if (MyRandomClass.getPercent() <= 10) {
					switch (MyRandomClass.rollDice(1, 3)) {
					case 1: {
						generateLootByTableName(
								"Shields and Armor Selection Table", null);
					}
						break;
					case 2: {
						generateLootByTableName(
								"Sword Selection Table", null);
					}
						break;
					case 3: {
						generateLootByTableName(
								"Weapon Misc. Selection Table", null);
					}
						break;
					default: {
					}
						;
					}// switch
				}// if

			}
				break;

			case 'C': {
				myReward.cp += getCP(20, 1, 12) * 1000;
				myReward.sp += getSP(30, 1, 6) * 1000;
				myReward.ep += getEP(10, 1, 4) * 1000;
				//myReward.gp += getGP(25,1,3)*1000;
				//myReward.pp += getPP(25,1,4)*100;
				myReward.gem += getGem(25, 1, 6);
				myReward.jewelry += getJewelry(20, 1, 3);

				generateLootCheck(10, 2,
						"2. Magic Item Table", null);

			}
				break;

			case 'D': {
				myReward.cp += getCP(10, 1, 8) * 1000;
				myReward.sp += getSP(15, 1, 12) * 1000;
				myReward.ep += getEP(15, 1, 8) * 1000;
				myReward.gp += getGP(50, 1, 6) * 1000;
				//myReward.pp += getPP(25,1,4)*100;
				myReward.gem += getGem(30, 1, 10);
				myReward.jewelry += getJewelry(25, 1, 6);
				if (MyRandomClass.getPercent() <= 15) {
					generateLootCheck(100, 2,
							"2. Magic Item Table", null);
					generateLootByTableName(
							"Potion Selection Table", null);
				}

			}
				break;
			case 'E': {
				myReward.cp += getCP(5, 1, 10) * 1000;
				myReward.sp += getSP(25, 1, 12) * 1000;
				myReward.ep += getEP(15, 1, 8) * 1000;
				myReward.gp += getGP(25, 1, 8) * 1000;
				//myReward.pp += getPP(25,1,4)*100;
				myReward.gem += getGem(15, 1, 12);
				myReward.jewelry += getJewelry(10, 1, 8);

				if (MyRandomClass.getPercent() <= 25) {
					generateLootCheck(100, 3,
							"2. Magic Item Table", null);
					generateLootByTableName(
							"Scroll Selection Table", null);
				}

			}
				break;
			case 'F': {
				//myReward.cp += getCP(10,1,8)*1000;
				myReward.sp += getSP(10, 1, 20) * 1000;
				myReward.ep += getEP(15, 1, 12) * 1000;
				myReward.gp += getGP(40, 1, 10) * 1000;
				myReward.pp += getPP(35, 1, 8) * 100;
				myReward.gem += getGem(20, 3, 10);
				myReward.jewelry += getJewelry(10, 1, 10);

				if (MyRandomClass.getPercent() <= 30) {
					String exclude[] = { "Sword Selection Table",
							"Weapon Misc. Selection Table" };
					generateLootCheck(100, 3,
							"2. Magic Item Table", exclude);
					generateLootByTableName(
							"Scroll Selection Table", null);
					
					generateLootByTableName(
							"Potion Selection Table", null);
					
				}

			}
				break;
			case 'G': {
				//myReward.cp += getCP(10,1,8)*1000;
				//myReward.sp += getSP(15,1,12)*1000;
				//myReward.ep += getEP(15,1,8)*1000;
				myReward.gp += getGP(50, 10, 4) * 1000;
				myReward.pp += getPP(50, 1, 20) * 100;
				myReward.gem += getGem(30, 5, 4);
				myReward.jewelry += getJewelry(25, 1, 10);

				if (MyRandomClass.getPercent() <= 35) {
					generateLootCheck(100, 4,
							"2. Magic Item Table", null);
					generateLootByTableName(
							"Scroll Selection Table", null);
				
				}

			}
				break;
			case 'H': {
				myReward.cp += getCP(25, 5, 6) * 1000;
				myReward.sp += getSP(40, 1, 100) * 1000;
				myReward.ep += getEP(40, 10, 4) * 1000;
				myReward.gp += getGP(55, 10, 6) * 1000;
				myReward.pp += getPP(25, 5, 10) * 100;
				myReward.gem += getGem(50, 1, 100);
				myReward.jewelry += getJewelry(50, 10, 4);

				if (MyRandomClass.getPercent() <= 15) {
					generateLootCheck(100, 4,
							"2. Magic Item Table", null);
					generateLootByTableName(
							"Scroll Selection Table", null);
					
					generateLootByTableName(
							"Potion Selection Table", null);
					
				}

			}
				break;
			case 'I': {
				//myReward.cp += getCP(10,1,8)*1000;
				//myReward.sp += getSP(15,1,12)*1000;
				//myReward.ep += getEP(15,1,8)*1000;
				//myReward.gp += getGP(50,1,6)*1000;
				myReward.pp += getPP(30, 3, 6) * 100;
				myReward.gem += getGem(55, 2, 10);
				myReward.jewelry += getJewelry(50, 1, 12);
				generateLootCheck(15, 1,
						"2. Magic Item Table", null);

			}
				break;
			case 'J': {
				myReward.cp += getCP(100, 3, 8);
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'K': {
				//				myReward.cp += getCP(10,1,8)*1000;
				myReward.sp += getSP(100, 3, 6);
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'L': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				myReward.ep += getEP(100, 2, 6);
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'M': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				myReward.gp += getGP(100, 2, 4);
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'N': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				myReward.pp += getPP(100, 1, 6);
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'O': {
				myReward.cp += getCP(25, 1, 4) * 1000;
				myReward.sp += getSP(20, 1, 3) * 1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'P': {
				//				myReward.cp += getCP(10,1,8)*1000;
				myReward.sp += getSP(30, 1, 6) * 1000;
				myReward.ep += getEP(25, 1, 2) * 1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'Q': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				myReward.gem += getGem(50, 1, 4);
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'R': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				myReward.gp += getGP(40, 2, 4) * 1000;
				myReward.pp += getPP(50, 10, 6) * 100;
				myReward.gem += getGem(55, 4, 8);
				myReward.jewelry += getJewelry(45, 1, 12);

			}
				break;
			case 'S': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

				generateLootCheck(40, MyRandomClass
						.rollDice(2, 4), "Potion Selection Table", null);

			}
				break;
			case 'T': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

				generateLootCheck(50, MyRandomClass
						.rollDice(1, 4), "Scroll Selection Table", null);
			}
				break;
			case 'U': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				myReward.gem += getGem(90, 10, 8);
				myReward.jewelry += getJewelry(80, 5, 6);

				if (MyRandomClass.getPercent() <= 70) {
					generateLootByTableName(
							"Ring Selection Table", null);
					

					generateLootByTableName(
							"Rod, Stave and Wand Selection Table", null);
					

					generateLootByTableName(
							"Misc. Selection Table", null);
					

					generateLootByTableName(
							"Shields and Armor Selection Table", null);
					

					generateLootByTableName(
							"Sword Selection Table", null);
					

					generateLootByTableName(
							"Weapon Misc. Selection Table", null);
					
				}

			}
				break;
			case 'V': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

				if (MyRandomClass.getPercent() <= 70) {
					generateLootCheck(100, 2,
							"Ring Selection Table", null);
					generateLootCheck(100, 2,
							"Rod, Stave and Wand Selection Table", null);
					generateLootCheck(100, 2,
							"Misc. Selection Table", null);
					generateLootCheck(100, 2,
							"Shields and Armor Selection Table", null);
					generateLootCheck(100, 2,
							"Sword Selection Table", null);
					generateLootCheck(100, 2,
							"Weapon Misc. Selection Table", null);
				}

			}
				break;
			case 'W': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				myReward.gp += getGP(60, 5, 6) * 1000;
				myReward.pp += getPP(15, 1, 8) * 100;
				myReward.gem += getGem(60, 10, 8);
				myReward.jewelry += getJewelry(50, 5, 8);

				generateLootCheck(55, 1,
						"Map Selection Table", null);

			}
				break;
			case 'X': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				//				myReward.gp += getGP(50,1,6)*1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

				if (MyRandomClass.getPercent() <= 60) {
					generateLootByTableName(
							"Misc. Selection Table", null);
			

					generateLootByTableName(
							"Potion Selection Table", null);

				}

			}
				break;
			case 'Y': {
				//				myReward.cp += getCP(10,1,8)*1000;
				//				myReward.sp += getSP(15,1,12)*1000;
				//				myReward.ep += getEP(15,1,8)*1000;
				myReward.gp += getGP(70, 2, 6) * 1000;
				//				//myReward.pp += getPP(25,1,4)*100;
				//				myReward.gem += getGem(30,1,10); 
				//				myReward.jewerly += getJewelry(25,1,6);

			}
				break;
			case 'Z': {
				myReward.cp += getCP(20, 1, 3) * 1000;
				myReward.sp += getSP(25, 1, 4) * 1000;
				myReward.ep += getEP(25, 1, 4) * 1000;
				myReward.gp += getGP(30, 1, 4) * 1000;
				myReward.pp += getPP(30, 1, 6) * 100;
				myReward.gem += getGem(55, 10, 6);
				myReward.jewelry += getJewelry(50, 5, 6);
				generateLootCheck(50, 3,
						"2. Magic Item Table", null);

			}
				break;

			default: {
			}
				;

			} // end switch

		} // end for tCount

		if (myReward.getCp() > 0)
			ost.rewardList.add(makeCoinItem("cp", myReward.getCp()));
		if (myReward.getSp() > 0)
			ost.rewardList.add(makeCoinItem("sp", myReward.getSp()));
		if (myReward.getEp() > 0)
			ost.rewardList.add(makeCoinItem("ep", myReward.getEp()));
		if (myReward.getGp() > 0)
			ost.rewardList.add(makeCoinItem("gp", myReward.getGp()));
		if (myReward.getPp() > 0)
			ost.rewardList.add(makeCoinItem("pp", myReward.getPp()));
		if (myReward.getGem() > 0) {
			//ost.rewardList.add(makeCoinItem("gems", myReward.getGem()));
			generateLootCheck(100, myReward.getGem(), "Gem Selection Table",null);
		}
		if (myReward.getJewelry() > 0) {
			generateLootCheck(100, myReward.getJewelry(), "Jewelry Selection Table",null);
//			ost.rewardList.add(makeCoinItem("jewelrly", myReward.getJewelry()));
		}

		String header = String.format("Type %c x%d:\n", tType, tCount);
		
		String output = TableRewardClass.getRewardOutput(ost.rewardList);
		typeTextArea.append(String.format("%s%s\n---------------\n",header,output));
		//		typeTextArea.append(String.format(
//				"%s%s\n%s%s%s%s%s%s%s\n------------\n", header,
//				output.length() < 1 ? "No magic found." : output,
//				myCP.length() > 0 ? myCP + "\n" : "", mySP.length() > 0 ? mySP
//						+ "\n" : "", myEP.length() > 0 ? myEP + "\n" : "", myGP
//						.length() > 0 ? myGP + "\n" : "",
//				myPP.length() > 0 ? myPP + "\n" : "",
//				myGEM.length() > 0 ? myGEM + "\n" : "",
//				myJEW.length() > 0 ? myJEW + "\n" : ""));

	}

	private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {

		if (!typeAppendCheckBox.isSelected())
			typeTextArea.setText("");

		for (TreasureTypePanel oP : ost.treasureTypeList) {
			if (oP.typeCheckBox.isSelected()) {
				String sValue = oP.modelTypeCountSpinner.getValue().toString();
				int count = Integer.parseInt(sValue);
				generateTreasureTypeLoot(oP.myType, count);
			}
		}
	}

	private void clearTypeLogButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		typeTextArea.setText("");
	}

	private void resetTypesButtonActionPerformed(java.awt.event.ActionEvent evt) {
		for (TreasureTypePanel oP : ost.treasureTypeList) {
			oP.typeCheckBox.setSelected(false);
			oP.modelTypeCountSpinner.setValue(new Integer(1));
		}
	}

	private class MyReward {
		int cp;
		int sp;
		int ep;
		int gp;
		int pp;
		int gem;
		int jewelry;

		public MyReward(String mReward) {
			this.cp = 0;
			this.sp = 0;
			this.ep = 0;
			this.gp = 0;
			this.pp = 0;
			this.gem = 0;
			this.jewelry = 0;
		}

		/**
		 * @return the cp
		 */
		public int getCp() {
			return cp;
		}

		/**
		 * @return the sp
		 */
		public int getSp() {
			return sp;
		}

		/**
		 * @return the ep
		 */
		public int getEp() {
			return ep;
		}
		/**
		 * @return the gp
		 */
		public int getGp() {
			return gp;
		}

		/**
		 * @return the pp
		 */
		public int getPp() {
			return pp;
		}

		/**
		 * @return the gem
		 */
		public int getGem() {
			return gem;
		}

		/**
		 * @return the jewelry
		 */
		public int getJewelry() {
			return jewelry;
		}


	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton clearTypeLogButton;
	private javax.swing.JButton generateButton;
	private javax.swing.JPanel generatorPanel;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTabbedPane mainTabbedPane;
	private javax.swing.JButton resetTypesButton;
	private javax.swing.JPanel treasureTypePanel;
	private javax.swing.JCheckBox typeAppendCheckBox;
	private javax.swing.JPanel typeListPanel;
	private javax.swing.JTextArea typeTextArea;
	// End of variables declaration//GEN-END:variables
	private MainClass ost;
	public Table_Generator tableGen;
}
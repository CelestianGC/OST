/*
 * Option_AskFor_SpellSlots.java
 *
 * Created on __DATE__, __TIME__
 */

package org.ost.main;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.ArrayList;

import javax.swing.JPanel;
import javax.swing.JSpinner;
import static org.ost.main.MyClasses.MyStatics.*;

/**
 *
 * @author  __USER__
 */
public class Option_AskFor_SpellSlots extends javax.swing.JDialog {
	MainClass ost;

	/** Creates new form Option_AskFor_AbilityScores */
	public Option_AskFor_SpellSlots(java.awt.Frame parent, boolean modal,
			MainClass ost, String sTitle, int[] spellPerLevel,
			String[] spellNames, String[] spellNameAbbrev) {
		super(parent, modal);
		this.ost = ost;
		initComponents();

		setTitle(sTitle);
		mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),
						1, true), sTitle,
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Segoe UI", 0, 12)));

		spellsSpinner = new ArrayList<JSpinner>();

		updatePanel(spellPerLevel, spellNames, spellNameAbbrev);

		setLocationRelativeTo(parent);
		//setSize(400, 300);
		pack();

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		mainPanel = new javax.swing.JPanel();
		buttonsPanel = new javax.swing.JPanel();
		doneButton = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosed(java.awt.event.WindowEvent evt) {
				formWindowClosed(evt);
			}
		});

		mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
				new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0),
						1, true), "TitleGoesHere",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Segoe UI", 0, 12)));
		mainPanel.setLayout(new java.awt.GridLayout(0, 1));
		getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

		buttonsPanel.setBackground(new java.awt.Color(204, 204, 204));
		buttonsPanel.setBorder(javax.swing.BorderFactory
				.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

		doneButton.setText("done");
		doneButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				doneButtonActionPerformed(evt);
			}
		});
		buttonsPanel.add(doneButton);

		getContentPane().add(buttonsPanel, java.awt.BorderLayout.PAGE_END);

		pack();
	}// </editor-fold>
	//GEN-END:initComponents

	private void formWindowClosed(java.awt.event.WindowEvent evt) {
		// TODO add your handling code here:
		updateValuesFromSpinners();
	}

	private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		setVisible(false);
		formWindowClosed(null);
	}

	/**
	 * put the spinner values into the array
	 * 
	 * @return
	 */
	public int[] updateValuesFromSpinners() {
		int i = 0;
		for (JSpinner sPinner : spellsSpinner) {
			currentSpells[i] = (int) sPinner.getValue();
			i++;
		}
		return (currentSpells);
	}

	void updatePanel(int[] spells, String[] spellNames, String[] spellNameAbbrev) {
		//		int i = MAX_ABILITIES;
		Font fFont = new Font("Segoe UI", 0, 12);
		FlowLayout lFlow = new FlowLayout(FlowLayout.CENTER, 0, 1);
		GridLayout lGrid = new GridLayout(1, 2);

		currentSpells = spells;

		spellsSpinner.clear();
		mainPanel.removeAll();
		int i = 0;
		for (Integer iE : spells) {
			JPanel pPanel = new JPanel(lFlow);
			pPanel.setToolTipText(spellNames[i]);
			pPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
					new javax.swing.border.LineBorder(new java.awt.Color(0, 0,
							0), 1, true), spellNames[i],
					javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
					javax.swing.border.TitledBorder.ABOVE_BOTTOM, fFont));
			JSpinner oJ = new JSpinner();
			oJ.setFont(fFont);
			oJ.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
			oJ.setValue(iE);
			spellsSpinner.add(oJ);
			pPanel.add(oJ);
			mainPanel.add(pPanel);
			i++;
		}

	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JPanel buttonsPanel;
	private javax.swing.JButton doneButton;
	private javax.swing.JPanel mainPanel;
	// End of variables declaration//GEN-END:variables
	private ArrayList<JSpinner> spellsSpinner;
	private int[] currentSpells;

}